{
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | i5 Toolkit Documentation",
    "keywords": "Namespace Global Classes JsonSerialization PackageExporter"
  },
  "api/Global.JsonSerialization.html": {
    "href": "api/Global.JsonSerialization.html",
    "title": "Class JsonSerialization | i5 Toolkit Documentation",
    "keywords": "Class JsonSerialization Inheritance Object JsonSerialization Namespace : Global Assembly : cs.temp.dll.dll Syntax public class JsonSerialization Methods TestTokenStruct_JsonUtility() Declaration public void TestTokenStruct_JsonUtility()"
  },
  "api/Global.PackageExporter.html": {
    "href": "api/Global.PackageExporter.html",
    "title": "Class PackageExporter | i5 Toolkit Documentation",
    "keywords": "Class PackageExporter Inheritance Object PackageExporter Namespace : Global Assembly : cs.temp.dll.dll Syntax public static class PackageExporter Methods ExportCoreReleasePackage() Declaration public static void ExportCoreReleasePackage() ExportPackages() Declaration public static void ExportPackages() ExportSampleReleasePackage() Declaration public static void ExportSampleReleasePackage()"
  },
  "api/i5.Toolkit.Core.AppConsole.ActivationVisibilityManager.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.ActivationVisibilityManager.html",
    "title": "Class ActivationVisibilityManager | i5 Toolkit Documentation",
    "keywords": "Class ActivationVisibilityManager Visibility manager which changes the visibility by activating/deactivating the gameobject Inheritance Object VisibilityManager ActivationVisibilityManager Implements IVisibilityManager Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public class ActivationVisibilityManager : VisibilityManager, IVisibilityManager Properties IsVisible Gets or sets the current visibility of the gameobject Declaration public override bool IsVisible { get; set; } Property Value Type Description Boolean Overrides VisibilityManager.IsVisible Implements IVisibilityManager"
  },
  "api/i5.Toolkit.Core.AppConsole.AutoScroller.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.AutoScroller.html",
    "title": "Class AutoScroller | i5 Toolkit Documentation",
    "keywords": "Class AutoScroller Auto scroller which is automatically scrolls a scrollview to the bottom The scroll view can be activated by an UI element and deactivated by manually scrolling the view Inheritance Object AutoScroller Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public class AutoScroller Constructors AutoScroller(IScrollView, IRectangle, IActivateable) Creates a new instance of the auto scroller Declaration public AutoScroller(IScrollView scrollView, IRectangle content, IActivateable elementToStartScroller) Parameters Type Name Description IScrollView scrollView The view which should be scrolled IRectangle content The content rectangle inside of the scrollview IActivateable elementToStartScroller The interaction element which starts the scroller Properties ScrollerActive If true, the scroller will make sure that the scrollview is always scrolled to the bottom Declaration public bool ScrollerActive { get; set; } Property Value Type Description Boolean Methods NotifyScrollValueChanged() Notifies the scroller that the scroll view was changed This can be due to two reasons: The user scrolled the UI element The size of the scroll view's content changed Declaration public void NotifyScrollValueChanged() OnEnable() Scrolls the scrollview to the bottom when the object is enabled Declaration public void OnEnable()"
  },
  "api/i5.Toolkit.Core.AppConsole.AutoScrollerBehaviour.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.AutoScrollerBehaviour.html",
    "title": "Class AutoScrollerBehaviour | i5 Toolkit Documentation",
    "keywords": "Class AutoScrollerBehaviour MonoBehaviour for binding the auto scroller logic Inheritance Object AutoScrollerBehaviour Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public class AutoScrollerBehaviour : MonoBehaviour Properties AutoScroller The instance which controls the auto scrolling Declaration public AutoScroller AutoScroller { get; } Property Value Type Description AutoScroller Methods OnAutoScrollButtonPressed() Called if the button which activates the automatic scrolling is pressed Declaration public void OnAutoScrollButtonPressed() OnScrollValueChanged() Called if the scroll value changes and notifies the auto scroller Declaration public void OnScrollValueChanged()"
  },
  "api/i5.Toolkit.Core.AppConsole.Console.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.Console.html",
    "title": "Class Console | i5 Toolkit Documentation",
    "keywords": "Class Console Handles the console logic Inheritance Object Console Implements IConsole Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public class Console : IConsole Constructors Console() Creates a new console Declaration public Console() Properties IsCapturing If true, the console captures messages Declaration public bool IsCapturing { get; set; } Property Value Type Description Boolean Messages Captured messages Declaration public List<ILogMessage> Messages { get; protected set; } Property Value Type Description List < ILogMessage > Methods AddMessage(ILogMessage) Declaration protected void AddMessage(ILogMessage message) Parameters Type Name Description ILogMessage message Subscribe() Declaration protected virtual void Subscribe() Unsubscribe() Declaration protected virtual void Unsubscribe() Events OnMessageAdded Event which is invoked when a new message is added to the console Declaration public event Action OnMessageAdded Event Type Type Description Action Implements IConsole"
  },
  "api/i5.Toolkit.Core.AppConsole.ConsoleUI.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.ConsoleUI.html",
    "title": "Class ConsoleUI | i5 Toolkit Documentation",
    "keywords": "Class ConsoleUI Logic for the console's UI connection Inheritance Object ConsoleUI TextConsoleUI Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public abstract class ConsoleUI Constructors ConsoleUI(LogFormatterConfiguration) Creates a new console UI logic Declaration public ConsoleUI(LogFormatterConfiguration logFormatterConfiguration = null) Parameters Type Name Description LogFormatterConfiguration logFormatterConfiguration Determines how messages should be formatted Fields logFormatter Declaration protected ILogFormatter logFormatter Field Value Type Description ILogFormatter Properties CaptureInBackground If true, the console captures messages, even if the object is deactivated Declaration public bool CaptureInBackground { get; set; } Property Value Type Description Boolean Console Console which handles the message capturing Declaration public IConsole Console { get; set; } Property Value Type Description IConsole Methods OnDisable() Called if hte object is disabled Stops capturing if it should not capture in background Declaration public void OnDisable() OnEnable() Called if the object is enabled Starts capturing messages Declaration public void OnEnable() UpdateUI() Declaration protected abstract void UpdateUI()"
  },
  "api/i5.Toolkit.Core.AppConsole.ConsoleUIBehaviour.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.ConsoleUIBehaviour.html",
    "title": "Class ConsoleUIBehaviour | i5 Toolkit Documentation",
    "keywords": "Class ConsoleUIBehaviour MonoBehaviour to connect console UI to Unity Inheritance Object ConsoleUIBehaviour TextMeshProUGUIConsoleUI Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public abstract class ConsoleUIBehaviour : MonoBehaviour Fields captureInBackground Declaration protected bool captureInBackground Field Value Type Description Boolean consoleUI Declaration protected ConsoleUI consoleUI Field Value Type Description ConsoleUI Methods Awake() Declaration protected virtual void Awake() OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable()"
  },
  "api/i5.Toolkit.Core.AppConsole.DefaultConsoleFormatter.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.DefaultConsoleFormatter.html",
    "title": "Class DefaultConsoleFormatter | i5 Toolkit Documentation",
    "keywords": "Class DefaultConsoleFormatter Default console formatter which should be used if no configuration file is provided Inheritance Object DefaultConsoleFormatter Implements ILogFormatter Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public class DefaultConsoleFormatter : ILogFormatter Methods Format(ILogMessage) Formats the given log messages to text output The default formatter returns the log message's content Declaration public string Format(ILogMessage logMessage) Parameters Type Name Description ILogMessage logMessage The log message to format Returns Type Description String Returns a formatted string Implements ILogFormatter"
  },
  "api/i5.Toolkit.Core.AppConsole.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.html",
    "title": "Namespace i5.Toolkit.Core.AppConsole | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.AppConsole Classes ActivationVisibilityManager Visibility manager which changes the visibility by activating/deactivating the gameobject AutoScroller Auto scroller which is automatically scrolls a scrollview to the bottom The scroll view can be activated by an UI element and deactivated by manually scrolling the view AutoScrollerBehaviour MonoBehaviour for binding the auto scroller logic Console Handles the console logic ConsoleUI Logic for the console's UI connection ConsoleUIBehaviour MonoBehaviour to connect console UI to Unity DefaultConsoleFormatter Default console formatter which should be used if no configuration file is provided LogColorFormatterConfiguration A configuration object for formatting log messages using colors LogFormatterConfiguration A console formatter configuration object which can be set up as a scriptable object LogMessage Log message as posted by the Unity API TextConsoleUI Console UI for text displays TextMeshProUGUIConsoleUI MonoBehaviour for constructing console UIs with the TextMeshProUGUI TMPLogColorFormatter Color-coded log formatter for TextMeshPro TMPLogColorFormatterConfiguration The color log format configuration for TextMeshPro displays VisibilityManager MonoBehaviour for managing an object's visiblity VisibilitySetter Binding component for handling user input and delegating it to the visibility manager Interfaces IConsole Console for capturing messages ILogColorFormatter Log formatter that uses color coding ILogFormatter Formatter that can format log messages to text output ILogMessage Log message IVisibilityManager Visibility manager that handles showing and hiding Unity objects"
  },
  "api/i5.Toolkit.Core.AppConsole.IConsole.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.IConsole.html",
    "title": "Interface IConsole | i5 Toolkit Documentation",
    "keywords": "Interface IConsole Console for capturing messages Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public interface IConsole Properties IsCapturing If true, the console is capturing messages Declaration bool IsCapturing { get; set; } Property Value Type Description Boolean Messages List of captured messages Declaration List<ILogMessage> Messages { get; } Property Value Type Description List < ILogMessage > Events OnMessageAdded Event which is invoked if a message was captured Declaration event Action OnMessageAdded Event Type Type Description Action"
  },
  "api/i5.Toolkit.Core.AppConsole.ILogColorFormatter.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.ILogColorFormatter.html",
    "title": "Interface ILogColorFormatter | i5 Toolkit Documentation",
    "keywords": "Interface ILogColorFormatter Log formatter that uses color coding Inherited Members ILogFormatter.Format(ILogMessage) Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public interface ILogColorFormatter : ILogFormatter Properties AssertColor The color for assert messages Declaration Color AssertColor { get; set; } Property Value Type Description Color DefaultColor The color for unexpected message types Declaration Color DefaultColor { get; set; } Property Value Type Description Color ErrorColor The color for error messages Declaration Color ErrorColor { get; set; } Property Value Type Description Color ExceptionColor The color for exception messages Declaration Color ExceptionColor { get; set; } Property Value Type Description Color LogColor The color for log messages Declaration Color LogColor { get; set; } Property Value Type Description Color WarningColor The color for warning messages Declaration Color WarningColor { get; set; } Property Value Type Description Color"
  },
  "api/i5.Toolkit.Core.AppConsole.ILogFormatter.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.ILogFormatter.html",
    "title": "Interface ILogFormatter | i5 Toolkit Documentation",
    "keywords": "Interface ILogFormatter Formatter that can format log messages to text output Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public interface ILogFormatter Methods Format(ILogMessage) Formats the given log message to text output Declaration string Format(ILogMessage logMessage) Parameters Type Name Description ILogMessage logMessage The log message to format Returns Type Description String Returns formatted text output based on the log message"
  },
  "api/i5.Toolkit.Core.AppConsole.ILogMessage.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.ILogMessage.html",
    "title": "Interface ILogMessage | i5 Toolkit Documentation",
    "keywords": "Interface ILogMessage Log message Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public interface ILogMessage : INotificationMessage Properties LogType The type of log message Declaration LogType LogType { get; } Property Value Type Description LogType StackTrace The stack trace of the log message Declaration string StackTrace { get; } Property Value Type Description String"
  },
  "api/i5.Toolkit.Core.AppConsole.IVisibilityManager.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.IVisibilityManager.html",
    "title": "Interface IVisibilityManager | i5 Toolkit Documentation",
    "keywords": "Interface IVisibilityManager Visibility manager that handles showing and hiding Unity objects Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public interface IVisibilityManager Properties IsVisible If true, an object is visible Declaration bool IsVisible { get; set; } Property Value Type Description Boolean"
  },
  "api/i5.Toolkit.Core.AppConsole.LogColorFormatterConfiguration.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.LogColorFormatterConfiguration.html",
    "title": "Class LogColorFormatterConfiguration | i5 Toolkit Documentation",
    "keywords": "Class LogColorFormatterConfiguration A configuration object for formatting log messages using colors Inheritance Object LogFormatterConfiguration LogColorFormatterConfiguration TMPLogColorFormatterConfiguration Inherited Members LogFormatterConfiguration.GenerateFormatter() Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public abstract class LogColorFormatterConfiguration : LogFormatterConfiguration Fields assertColor Declaration protected Color assertColor Field Value Type Description Color errorColor Declaration protected Color errorColor Field Value Type Description Color exceptionColor Declaration protected Color exceptionColor Field Value Type Description Color logColor Declaration protected Color logColor Field Value Type Description Color warningColor Declaration protected Color warningColor Field Value Type Description Color"
  },
  "api/i5.Toolkit.Core.AppConsole.LogFormatterConfiguration.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.LogFormatterConfiguration.html",
    "title": "Class LogFormatterConfiguration | i5 Toolkit Documentation",
    "keywords": "Class LogFormatterConfiguration A console formatter configuration object which can be set up as a scriptable object Inheritance Object LogFormatterConfiguration LogColorFormatterConfiguration Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public abstract class LogFormatterConfiguration : ScriptableObject Methods GenerateFormatter() Creates a formatter instance which can be used to format messages Declaration public abstract ILogFormatter GenerateFormatter() Returns Type Description ILogFormatter Returns the formatter instance with the set up configuration"
  },
  "api/i5.Toolkit.Core.AppConsole.LogMessage.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.LogMessage.html",
    "title": "Class LogMessage | i5 Toolkit Documentation",
    "keywords": "Class LogMessage Log message as posted by the Unity API Inheritance Object LogMessage Implements ILogMessage INotificationMessage Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public class LogMessage : ILogMessage, INotificationMessage Constructors LogMessage(String, String, LogType) Creates a new log message instance Declaration public LogMessage(string content, string stackTrace, LogType logType) Parameters Type Name Description String content The content of the log message String stackTrace The stack trace of the log message LogType logType The typ of log message Properties Content Content of the log message Declaration public string Content { get; } Property Value Type Description String LogType Type of the log message Declaration public LogType LogType { get; } Property Value Type Description LogType StackTrace Stack trace of the log message Declaration public string StackTrace { get; } Property Value Type Description String Implements ILogMessage INotificationMessage"
  },
  "api/i5.Toolkit.Core.AppConsole.TextConsoleUI.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.TextConsoleUI.html",
    "title": "Class TextConsoleUI | i5 Toolkit Documentation",
    "keywords": "Class TextConsoleUI Console UI for text displays Inheritance Object ConsoleUI TextConsoleUI Inherited Members ConsoleUI.CaptureInBackground ConsoleUI.logFormatter ConsoleUI.Console ConsoleUI.OnEnable() ConsoleUI.OnDisable() Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public class TextConsoleUI : ConsoleUI Constructors TextConsoleUI(ITextDisplay, LogFormatterConfiguration) Creates the console UI logic instance Declaration public TextConsoleUI(ITextDisplay consoleTextDisplay, LogFormatterConfiguration logFormatterConfiguration = null) Parameters Type Name Description ITextDisplay consoleTextDisplay The text display on which messages should be shown LogFormatterConfiguration logFormatterConfiguration The formatter configuration that defines how messages are formatted Methods UpdateUI() Declaration protected override void UpdateUI() Overrides ConsoleUI.UpdateUI()"
  },
  "api/i5.Toolkit.Core.AppConsole.TextMeshProUGUIConsoleUI.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.TextMeshProUGUIConsoleUI.html",
    "title": "Class TextMeshProUGUIConsoleUI | i5 Toolkit Documentation",
    "keywords": "Class TextMeshProUGUIConsoleUI MonoBehaviour for constructing console UIs with the TextMeshProUGUI Inheritance Object ConsoleUIBehaviour TextMeshProUGUIConsoleUI Inherited Members ConsoleUIBehaviour.captureInBackground ConsoleUIBehaviour.consoleUI ConsoleUIBehaviour.OnEnable() ConsoleUIBehaviour.OnDisable() Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public class TextMeshProUGUIConsoleUI : ConsoleUIBehaviour Fields logFormatterConfiguration Declaration protected LogFormatterConfiguration logFormatterConfiguration Field Value Type Description LogFormatterConfiguration Methods Awake() Declaration protected override void Awake() Overrides ConsoleUIBehaviour.Awake()"
  },
  "api/i5.Toolkit.Core.AppConsole.TMPLogColorFormatter.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.TMPLogColorFormatter.html",
    "title": "Class TMPLogColorFormatter | i5 Toolkit Documentation",
    "keywords": "Class TMPLogColorFormatter Color-coded log formatter for TextMeshPro Inheritance Object TMPLogColorFormatter Implements ILogColorFormatter ILogFormatter Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public class TMPLogColorFormatter : ILogColorFormatter, ILogFormatter Properties AssertColor The color for assert messages Declaration public Color AssertColor { get; set; } Property Value Type Description Color DefaultColor The color for unexpected message types Declaration public Color DefaultColor { get; set; } Property Value Type Description Color ErrorColor The color for error messages Declaration public Color ErrorColor { get; set; } Property Value Type Description Color ExceptionColor The color for exception messages Declaration public Color ExceptionColor { get; set; } Property Value Type Description Color LogColor The color for log messages Declaration public Color LogColor { get; set; } Property Value Type Description Color WarningColor The color for warning messages Declaration public Color WarningColor { get; set; } Property Value Type Description Color Methods Format(ILogMessage) Formats the given log message to text output Declaration public string Format(ILogMessage message) Parameters Type Name Description ILogMessage message The message to format Returns Type Description String Returns formatted text output based on the log message Implements ILogColorFormatter ILogFormatter"
  },
  "api/i5.Toolkit.Core.AppConsole.TMPLogColorFormatterConfiguration.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.TMPLogColorFormatterConfiguration.html",
    "title": "Class TMPLogColorFormatterConfiguration | i5 Toolkit Documentation",
    "keywords": "Class TMPLogColorFormatterConfiguration The color log format configuration for TextMeshPro displays Inheritance Object LogFormatterConfiguration LogColorFormatterConfiguration TMPLogColorFormatterConfiguration Inherited Members LogColorFormatterConfiguration.logColor LogColorFormatterConfiguration.warningColor LogColorFormatterConfiguration.errorColor LogColorFormatterConfiguration.exceptionColor LogColorFormatterConfiguration.assertColor Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public class TMPLogColorFormatterConfiguration : LogColorFormatterConfiguration Methods GenerateFormatter() Generates a formatter for TextMeshPro configurers Declaration public override ILogFormatter GenerateFormatter() Returns Type Description ILogFormatter Returns the set up formatter Overrides LogFormatterConfiguration.GenerateFormatter()"
  },
  "api/i5.Toolkit.Core.AppConsole.VisibilityManager.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.VisibilityManager.html",
    "title": "Class VisibilityManager | i5 Toolkit Documentation",
    "keywords": "Class VisibilityManager MonoBehaviour for managing an object's visiblity Inheritance Object VisibilityManager ActivationVisibilityManager Implements IVisibilityManager Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public abstract class VisibilityManager : MonoBehaviour, IVisibilityManager Properties IsVisible Declaration public abstract bool IsVisible { get; set; } Property Value Type Description Boolean Implements IVisibilityManager"
  },
  "api/i5.Toolkit.Core.AppConsole.VisibilitySetter.html": {
    "href": "api/i5.Toolkit.Core.AppConsole.VisibilitySetter.html",
    "title": "Class VisibilitySetter | i5 Toolkit Documentation",
    "keywords": "Class VisibilitySetter Binding component for handling user input and delegating it to the visibility manager Inheritance Object VisibilitySetter Namespace : i5.Toolkit.Core.AppConsole Assembly : cs.temp.dll.dll Syntax public class VisibilitySetter : MonoBehaviour Fields activationKey Declaration public KeyCode activationKey Field Value Type Description KeyCode consoleVisibilityManager Declaration public VisibilityManager consoleVisibilityManager Field Value Type Description VisibilityManager"
  },
  "api/i5.Toolkit.Core.Editor.TestHelpers.EditModeTestUtilities.html": {
    "href": "api/i5.Toolkit.Core.Editor.TestHelpers.EditModeTestUtilities.html",
    "title": "Class EditModeTestUtilities | i5 Toolkit Documentation",
    "keywords": "Class EditModeTestUtilities Inheritance Object EditModeTestUtilities Namespace : i5.Toolkit.Core.Editor.TestHelpers Assembly : cs.temp.dll.dll Syntax public static class EditModeTestUtilities Methods ResetScene() Declaration public static void ResetScene()"
  },
  "api/i5.Toolkit.Core.Editor.TestHelpers.html": {
    "href": "api/i5.Toolkit.Core.Editor.TestHelpers.html",
    "title": "Namespace i5.Toolkit.Core.Editor.TestHelpers | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Editor.TestHelpers Classes EditModeTestUtilities"
  },
  "api/i5.Toolkit.Core.Experimental.NotificationSystem.html": {
    "href": "api/i5.Toolkit.Core.Experimental.NotificationSystem.html",
    "title": "Namespace i5.Toolkit.Core.Experimental.NotificationSystem | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Experimental.NotificationSystem Classes NotificationMessage NotificationService Interfaces INotificationMessage INotificationService"
  },
  "api/i5.Toolkit.Core.Experimental.NotificationSystem.INotificationMessage.html": {
    "href": "api/i5.Toolkit.Core.Experimental.NotificationSystem.INotificationMessage.html",
    "title": "Interface INotificationMessage | i5 Toolkit Documentation",
    "keywords": "Interface INotificationMessage Namespace : i5.Toolkit.Core.Experimental.NotificationSystem Assembly : cs.temp.dll.dll Syntax public interface INotificationMessage Properties Content Declaration string Content { get; } Property Value Type Description String"
  },
  "api/i5.Toolkit.Core.Experimental.NotificationSystem.INotificationService.html": {
    "href": "api/i5.Toolkit.Core.Experimental.NotificationSystem.INotificationService.html",
    "title": "Interface INotificationService | i5 Toolkit Documentation",
    "keywords": "Interface INotificationService Namespace : i5.Toolkit.Core.Experimental.NotificationSystem Assembly : cs.temp.dll.dll Syntax public interface INotificationService : IService Methods PostNotification(INotificationMessage) Declaration void PostNotification(INotificationMessage message) Parameters Type Name Description INotificationMessage message PostNotification(String) Declaration void PostNotification(string message) Parameters Type Name Description String message Events NotificationPosted Declaration event EventHandler<INotificationMessage> NotificationPosted Event Type Type Description EventHandler < INotificationMessage >"
  },
  "api/i5.Toolkit.Core.Experimental.NotificationSystem.NotificationMessage.html": {
    "href": "api/i5.Toolkit.Core.Experimental.NotificationSystem.NotificationMessage.html",
    "title": "Class NotificationMessage | i5 Toolkit Documentation",
    "keywords": "Class NotificationMessage Inheritance Object NotificationMessage Implements INotificationMessage Namespace : i5.Toolkit.Core.Experimental.NotificationSystem Assembly : cs.temp.dll.dll Syntax public class NotificationMessage : INotificationMessage Constructors NotificationMessage(String) Declaration public NotificationMessage(string content) Parameters Type Name Description String content Properties Content Declaration public string Content { get; } Property Value Type Description String Implements INotificationMessage"
  },
  "api/i5.Toolkit.Core.Experimental.NotificationSystem.NotificationService.html": {
    "href": "api/i5.Toolkit.Core.Experimental.NotificationSystem.NotificationService.html",
    "title": "Class NotificationService | i5 Toolkit Documentation",
    "keywords": "Class NotificationService Inheritance Object NotificationService Implements INotificationService IService Namespace : i5.Toolkit.Core.Experimental.NotificationSystem Assembly : cs.temp.dll.dll Syntax public class NotificationService : INotificationService, IService Constructors NotificationService() Declaration public NotificationService() Methods Cleanup() Declaration public void Cleanup() Initialize(IServiceManager) Declaration public void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner PostNotification(INotificationMessage) Declaration public void PostNotification(INotificationMessage message) Parameters Type Name Description INotificationMessage message PostNotification(String) Declaration public void PostNotification(string message) Parameters Type Name Description String message Events NotificationPosted Declaration public event EventHandler<INotificationMessage> NotificationPosted Event Type Type Description EventHandler < INotificationMessage > Implements INotificationService IService"
  },
  "api/i5.Toolkit.Core.ModelImporters.html": {
    "href": "api/i5.Toolkit.Core.ModelImporters.html",
    "title": "Namespace i5.Toolkit.Core.ModelImporters | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.ModelImporters Classes MtlLibrary Class for parsing and storing material libraries from .mtl files ObjImporter Service for importing and parsing .obj files ObjParseResult Result of one sub-object of a parsing operation for a .obj file Structs VertexData Stores data for one vertex"
  },
  "api/i5.Toolkit.Core.ModelImporters.MtlLibrary.html": {
    "href": "api/i5.Toolkit.Core.ModelImporters.MtlLibrary.html",
    "title": "Class MtlLibrary | i5 Toolkit Documentation",
    "keywords": "Class MtlLibrary Class for parsing and storing material libraries from .mtl files Inheritance Object MtlLibrary Namespace : i5.Toolkit.Core.ModelImporters Assembly : cs.temp.dll.dll Syntax public class MtlLibrary Constructors MtlLibrary() Constructor Declaration public MtlLibrary() Properties ContentLoader Gets or sets the module which loads the .mtl files Declaration public IContentLoader<string> ContentLoader { get; set; } Property Value Type Description IContentLoader < String > ExtendedLogging If set to true, the service will log additional information, e.g. comments in the .mtl file Declaration public bool ExtendedLogging { get; set; } Property Value Type Description Boolean Methods GetMaterialConstructor(String, String) Returns a material from a library as a material constructor instance Declaration public MaterialConstructor GetMaterialConstructor(string materialLibrary, string materialName) Parameters Type Name Description String materialLibrary The library name which contains the material String materialName The name of the material in the library Returns Type Description MaterialConstructor Returns a material constructor that resembles the material; returns null if the libarary or material does not exist LibraryLoaded(String) Returns true if the library with the given name was loaded Declaration public bool LibraryLoaded(string name) Parameters Type Name Description String name The name of the library Returns Type Description Boolean Returns true if the library was loaded LoadLibraryAsyc(Uri, String) Asynchronously loads a material library from the specified URI Declaration public Task<bool> LoadLibraryAsyc(Uri uri, string libraryName) Parameters Type Name Description Uri uri Full uri to the .mtl file String libraryName The name of the library Returns Type Description Task < Boolean > Returns true if the library could be loaded"
  },
  "api/i5.Toolkit.Core.ModelImporters.ObjImporter.html": {
    "href": "api/i5.Toolkit.Core.ModelImporters.ObjImporter.html",
    "title": "Class ObjImporter | i5 Toolkit Documentation",
    "keywords": "Class ObjImporter Service for importing and parsing .obj files Inheritance Object ObjImporter Namespace : i5.Toolkit.Core.ModelImporters Assembly : cs.temp.dll.dll Syntax public class ObjImporter : IService Properties ContentLoader Module that should be used for fetching the .obj file's content Declaration public IContentLoader<string> ContentLoader { get; set; } Property Value Type Description IContentLoader < String > ExtendedLogging If set to true, additional information, e.g. comments in the .obj file, are logged Declaration public bool ExtendedLogging { get; set; } Property Value Type Description Boolean MtlLibrary instance of the MtlLibrary Declaration public MtlLibrary MtlLibrary { get; } Property Value Type Description MtlLibrary Methods Cleanup() Called by the service manager to clean up the service if it is stopped Declaration public void Cleanup() ImportAsync(String) Asynchronously imports the given .obj file from the specified url Declaration public Task<GameObject> ImportAsync(string url) Parameters Type Name Description String url The url to the .obj file Returns Type Description Task < GameObject > The GameObject that was created for the imported .obj Initialize(IServiceManager) Called by the service manager to initialize the service if it is started Declaration public void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner The service manager that owns this service"
  },
  "api/i5.Toolkit.Core.ModelImporters.ObjParseResult.html": {
    "href": "api/i5.Toolkit.Core.ModelImporters.ObjParseResult.html",
    "title": "Class ObjParseResult | i5 Toolkit Documentation",
    "keywords": "Class ObjParseResult Result of one sub-object of a parsing operation for a .obj file Inheritance Object ObjParseResult Namespace : i5.Toolkit.Core.ModelImporters Assembly : cs.temp.dll.dll Syntax public class ObjParseResult Constructors ObjParseResult() Creates a new parse result Declaration public ObjParseResult() Properties LibraryPath Path to the material library that is used for the sub-object Declaration public string LibraryPath { get; set; } Property Value Type Description String MaterialName Name of the material which is used for the sub-object Declaration public string MaterialName { get; set; } Property Value Type Description String ObjectConstructor An object constructor which was for the sub-object Declaration public ObjectConstructor ObjectConstructor { get; } Property Value Type Description ObjectConstructor"
  },
  "api/i5.Toolkit.Core.ModelImporters.VertexData.html": {
    "href": "api/i5.Toolkit.Core.ModelImporters.VertexData.html",
    "title": "Struct VertexData | i5 Toolkit Documentation",
    "keywords": "Struct VertexData Stores data for one vertex Namespace : i5.Toolkit.Core.ModelImporters Assembly : cs.temp.dll.dll Syntax public struct VertexData Constructors VertexData(Int32) Creates a vertex data object with the vertex index only Declaration public VertexData(int vertexIndex) Parameters Type Name Description Int32 vertexIndex The index of the vertex VertexData(Int32, Int32) Creates a vertex data object where the vertex index and normal vector index are set Declaration public VertexData(int vertexIndex, int normalVectorIndex) Parameters Type Name Description Int32 vertexIndex The index of the vertex Int32 normalVectorIndex The index of the vertex in the normal vector array VertexData(Int32, Int32, Int32) Creates a vertex data object where the vertex index, uv index and normal vector index are set Declaration public VertexData(int vertexIndex, int uvIndex, int normalVectorIndex) Parameters Type Name Description Int32 vertexIndex The index of the vertex Int32 uvIndex The index of the vertex in the UV layout Int32 normalVectorIndex The index of the vertex in the normal vector array Fields normalVectorIndex The index in the normal vector array Declaration public int normalVectorIndex Field Value Type Description Int32 uvIndex The index in the UV layout Declaration public int uvIndex Field Value Type Description Int32 vertexIndex The index of the vertex Declaration public int vertexIndex Field Value Type Description Int32 Properties UseNormalVectorIndex True if the normal vector index is set Declaration public bool UseNormalVectorIndex { get; } Property Value Type Description Boolean UseUvIndex True if the UV index is set Declaration public bool UseUvIndex { get; } Property Value Type Description Boolean Methods Equals(Object) Checks if two vertex data objects are equal Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The other vertex data object Returns Type Description Boolean True if the vertex data objects resemble the same vertex Overrides ValueType.Equals(Object) GetHashCode() Gets a hash code for the vertex data object Declaration public override int GetHashCode() Returns Type Description Int32 Returns a hash code for the vertex data object Overrides ValueType.GetHashCode()"
  },
  "api/i5.Toolkit.Core.Modified3DObjects.html": {
    "href": "api/i5.Toolkit.Core.Modified3DObjects.html",
    "title": "Namespace i5.Toolkit.Core.Modified3DObjects | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Modified3DObjects Classes RoundedCorners Constructs a rounded 3D rectangle with depth"
  },
  "api/i5.Toolkit.Core.Modified3DObjects.RoundedCorners.html": {
    "href": "api/i5.Toolkit.Core.Modified3DObjects.RoundedCorners.html",
    "title": "Class RoundedCorners | i5 Toolkit Documentation",
    "keywords": "Class RoundedCorners Constructs a rounded 3D rectangle with depth Inheritance Object RoundedCorners Namespace : i5.Toolkit.Core.Modified3DObjects Assembly : cs.temp.dll.dll Syntax public class RoundedCorners : MonoBehaviour Fields cornerRadius Declaration public float cornerRadius Field Value Type Description Single depth Declaration public float depth Field Value Type Description Single exactColliders Declaration public bool exactColliders Field Value Type Description Boolean height Declaration public float height Field Value Type Description Single subdivisions Declaration public int subdivisions Field Value Type Description Int32 width Declaration public float width Field Value Type Description Single"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.AuthorizationFlow.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.AuthorizationFlow.html",
    "title": "Enum AuthorizationFlow | i5 Toolkit Documentation",
    "keywords": "Enum AuthorizationFlow The authorization flow of the OpenID Connect procedure It is recommended to use the Authorization Code flow Namespace : i5.Toolkit.Core.OpenIDConnectClient Assembly : cs.temp.dll.dll Syntax public enum AuthorizationFlow Fields Name Description AUTHORIZATION_CODE IMPLICIT"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.ClientData.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.ClientData.html",
    "title": "Class ClientData | i5 Toolkit Documentation",
    "keywords": "Class ClientData Describes configurations of client data Inheritance Object ClientData Namespace : i5.Toolkit.Core.OpenIDConnectClient Assembly : cs.temp.dll.dll Syntax public class ClientData Constructors ClientData(String, String) Creates a new client data instance with the given parameters Declaration public ClientData(string clientId, string clientSecret) Parameters Type Name Description String clientId The id of the client that is registered at the provider String clientSecret The secret of the client that was issued by the provider Properties ClientId The id of the client that is registered at the provider Declaration public string ClientId { get; } Property Value Type Description String ClientSecret The secret of the client that was issued by the provider Declaration public string ClientSecret { get; } Property Value Type Description String"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.ClientDataObject.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.ClientDataObject.html",
    "title": "Class ClientDataObject | i5 Toolkit Documentation",
    "keywords": "Class ClientDataObject Scriptable object for storing client data in the assets folder as a separate file This is used so that the client data can be specified and put into a .gitignore file so that they are not uploaded in public repositories, e.g. on GitHub Inheritance Object ClientDataObject Namespace : i5.Toolkit.Core.OpenIDConnectClient Assembly : cs.temp.dll.dll Syntax public class ClientDataObject : ScriptableObject Fields clientData The credentials of the client so that it is accepted by the OpenID Connect provider Declaration public ClientData clientData Field Value Type Description ClientData"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.html",
    "title": "Namespace i5.Toolkit.Core.OpenIDConnectClient | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.OpenIDConnectClient Classes ClientData Describes configurations of client data ClientDataObject Scriptable object for storing client data in the assets folder as a separate file This is used so that the client data can be specified and put into a .gitignore file so that they are not uploaded in public repositories, e.g. on GitHub LearningLayersAuthorizationFlowAnswer Data description of the answer that is received after the access token was requested in the authorization flow LearningLayersOidcProvider Implementation of the OpenID Connect Learning Layers Provider More information can be found here: https://api.learning-layers.eu/o/oauth2/ LearningLayersUserInfo Description of the user information data for the Learning Layers client OpenIDConnectService Service that implements the OpenID Connect authentification PostBuildOidcPatcher RedirectReceivedEventArgs Event arguments for the redirect event RedirectServerListener Implementation of a server that serves the redirect after the OpenID Connect login Interfaces IOidcProvider Contract that specifies the capabilities of an OpenID Connect provider IRedirectServerListener Contract which specifies the capabilities of the server that listens for redirects IUserInfo Contract specifying how user information that can be accessed from an OIDC provider Enums AuthorizationFlow The authorization flow of the OpenID Connect procedure It is recommended to use the Authorization Code flow"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.IOidcProvider.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.IOidcProvider.html",
    "title": "Interface IOidcProvider | i5 Toolkit Documentation",
    "keywords": "Interface IOidcProvider Contract that specifies the capabilities of an OpenID Connect provider Namespace : i5.Toolkit.Core.OpenIDConnectClient Assembly : cs.temp.dll.dll Syntax public interface IOidcProvider Properties AuthorizationFlow Gets the authorization flow that should be used for the provider Declaration AuthorizationFlow AuthorizationFlow { get; } Property Value Type Description AuthorizationFlow ClientData Client data that are required to authorize the client at the provider Declaration ClientData ClientData { get; set; } Property Value Type Description ClientData RestConnector Specifies how the REST API of the Web service is accessed Declaration IRestConnector RestConnector { get; set; } Property Value Type Description IRestConnector Methods CheckAccessTokenAsync(String) Checks if the access token is valid by checking it at the provider Declaration Task<bool> CheckAccessTokenAsync(string accessToken) Parameters Type Name Description String accessToken The access token that should be checked Returns Type Description Task < Boolean > True if the access token is valid, otherwise false GetAccessToken(Dictionary<String, String>) Gets the access token from a list of parameters in a Web answer Declaration string GetAccessToken(Dictionary<string, string> redirectParameters) Parameters Type Name Description Dictionary < String , String > redirectParameters The parameters of the Web answer as a dictionary Returns Type Description String Returns the access token if it exists in the parameters, otherwise an empty string is returned GetAccessTokenFromCodeAsync(String, String) Gets the access token based on a previously retrieved authorization code Declaration Task<string> GetAccessTokenFromCodeAsync(string code, string redirectUri) Parameters Type Name Description String code The authorization code String redirectUri The redirect URI which was used during the login Returns Type Description Task < String > Returns the access token if it could be retrieved; otherwise it returns an empty string GetAuthorizationCode(Dictionary<String, String>) Extracts the authorization code from parameters of a Web answer Declaration string GetAuthorizationCode(Dictionary<string, string> redirectParameters) Parameters Type Name Description Dictionary < String , String > redirectParameters Parameters of a Web answer as a dictionary Returns Type Description String The authorization code if it could be found, otherwise an empty string is returned GetUserInfoAsync(String) Gets information about the logged in user from the provider Declaration Task<IUserInfo> GetUserInfoAsync(string accessToken) Parameters Type Name Description String accessToken The access token to authenticate the user Returns Type Description Task < IUserInfo > Returns information about the logged in user if the request was successful, otherwise null OpenLoginPage(String[], String) Opens the provider's login page in the system's default Web browser Declaration void OpenLoginPage(string[] scopes, string redirectUri) Parameters Type Name Description String [] scopes The OpenID Connect scopes that the user must agree to String redirectUri The URI to which the browser should redirect after the successful login ParametersContainError(Dictionary<String, String>, out String) Checks if the provider included error messages in the parameters of a Web answer Declaration bool ParametersContainError(Dictionary<string, string> parameters, out string errorMessage) Parameters Type Name Description Dictionary < String , String > parameters The parameters of a Web answer as a dictionary String errorMessage The error message that the provider included, empty if no error exists Returns Type Description Boolean Returns true if the parameters contain an error message, otherwise false"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.IRedirectServerListener.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.IRedirectServerListener.html",
    "title": "Interface IRedirectServerListener | i5 Toolkit Documentation",
    "keywords": "Interface IRedirectServerListener Contract which specifies the capabilities of the server that listens for redirects Namespace : i5.Toolkit.Core.OpenIDConnectClient Assembly : cs.temp.dll.dll Syntax public interface IRedirectServerListener Properties ListeningUri Declaration string ListeningUri { get; set; } Property Value Type Description String ResponseString The HTML string which is send as an answer if a request is made to the server Declaration string ResponseString { get; set; } Property Value Type Description String ServerActive If true, the server is currently active Declaration bool ServerActive { get; } Property Value Type Description Boolean Methods GenerateListeningUri(String) Generates and sets a redirect URI with a free port on which the server will listen once it is started Declaration string GenerateListeningUri(string protocol = \"http\") Parameters Type Name Description String protocol The URI schema that the URI should use Returns Type Description String Returns a URI with a free port on which the server can listen StartServer() Starts the server Declaration void StartServer() StopServerImmediately() Stops the server immediately, aborting its current operation Declaration void StopServerImmediately() Events RedirectReceived Event which is invoked once a redirect has been received Declaration event EventHandler<RedirectReceivedEventArgs> RedirectReceived Event Type Type Description EventHandler < RedirectReceivedEventArgs >"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.IUserInfo.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.IUserInfo.html",
    "title": "Interface IUserInfo | i5 Toolkit Documentation",
    "keywords": "Interface IUserInfo Contract specifying how user information that can be accessed from an OIDC provider Namespace : i5.Toolkit.Core.OpenIDConnectClient Assembly : cs.temp.dll.dll Syntax public interface IUserInfo Properties Email The email address of the logged in user Declaration string Email { get; } Property Value Type Description String FullName The full name of the logged in user Declaration string FullName { get; } Property Value Type Description String Username The user name of the logged in user Declaration string Username { get; } Property Value Type Description String"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.LearningLayersAuthorizationFlowAnswer.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.LearningLayersAuthorizationFlowAnswer.html",
    "title": "Class LearningLayersAuthorizationFlowAnswer | i5 Toolkit Documentation",
    "keywords": "Class LearningLayersAuthorizationFlowAnswer Data description of the answer that is received after the access token was requested in the authorization flow Inheritance Object LearningLayersAuthorizationFlowAnswer Namespace : i5.Toolkit.Core.OpenIDConnectClient Assembly : cs.temp.dll.dll Syntax public class LearningLayersAuthorizationFlowAnswer Fields access_token Declaration public string access_token Field Value Type Description String error Declaration public string error Field Value Type Description String error_description Declaration public string error_description Field Value Type Description String expires_in Declaration public int expires_in Field Value Type Description Int32 id_token Declaration public string id_token Field Value Type Description String scope Declaration public string scope Field Value Type Description String token_type Declaration public string token_type Field Value Type Description String"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.LearningLayersOidcProvider.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.LearningLayersOidcProvider.html",
    "title": "Class LearningLayersOidcProvider | i5 Toolkit Documentation",
    "keywords": "Class LearningLayersOidcProvider Implementation of the OpenID Connect Learning Layers Provider More information can be found here: https://api.learning-layers.eu/o/oauth2/ Inheritance Object LearningLayersOidcProvider Implements IOidcProvider Namespace : i5.Toolkit.Core.OpenIDConnectClient Assembly : cs.temp.dll.dll Syntax public class LearningLayersOidcProvider : IOidcProvider Constructors LearningLayersOidcProvider() Creates a new instance of the learning layers client Declaration public LearningLayersOidcProvider() Properties AuthorizationFlow Gets or sets the used authorization flow Declaration public AuthorizationFlow AuthorizationFlow { get; set; } Property Value Type Description AuthorizationFlow Browser The implementation that should accesss the browser Declaration public IBrowser Browser { get; set; } Property Value Type Description IBrowser ClientData Client data that are required to authorize the client at the provider Declaration public ClientData ClientData { get; set; } Property Value Type Description ClientData JsonSerializer Serializer that is responsible for parsing JSON data and converting to JSON Declaration public IJsonSerializer JsonSerializer { get; set; } Property Value Type Description IJsonSerializer RestConnector Specifies how the REST API of the Web service is accessed Declaration public IRestConnector RestConnector { get; set; } Property Value Type Description IRestConnector Methods CheckAccessTokenAsync(String) Checks if the access token is valid by checking it at the Learning Layers provider Declaration public Task<bool> CheckAccessTokenAsync(string accessToken) Parameters Type Name Description String accessToken The access token that should be checked Returns Type Description Task < Boolean > True if the access token is valid, otherwise false GetAccessToken(Dictionary<String, String>) Gets the access token from a list of parameters in a Web answer Declaration public string GetAccessToken(Dictionary<string, string> redirectParameters) Parameters Type Name Description Dictionary < String , String > redirectParameters The parameters of the Web answer as a dictionary Returns Type Description String Returns the access token if it exists in the parameters, otherwise an empty string is returned GetAccessTokenFromCodeAsync(String, String) Gets the access token based on a previously retrieved authorization code Declaration public Task<string> GetAccessTokenFromCodeAsync(string code, string redirectUri) Parameters Type Name Description String code The authorization code String redirectUri The redirect URI which was used during the login Returns Type Description Task < String > Returns the access token if it could be retrieved; otherwise it returns an empty string GetAuthorizationCode(Dictionary<String, String>) Extracts the authorization code from parameters of a Web answer Declaration public string GetAuthorizationCode(Dictionary<string, string> redirectParameters) Parameters Type Name Description Dictionary < String , String > redirectParameters Parameters of a Web answer as a dictionary Returns Type Description String The authorization code if it could be found, otherwise an empty string is returned GetUserInfoAsync(String) Gets information about the logged in user from the learning layers provider Declaration public Task<IUserInfo> GetUserInfoAsync(string accessToken) Parameters Type Name Description String accessToken The access token to authenticate the user Returns Type Description Task < IUserInfo > Returns information about the logged in user if the request was successful, otherwise null OpenLoginPage(String[], String) Opens the Learning Layers login page in the system's default Web browser Declaration public void OpenLoginPage(string[] scopes, string redirectUri) Parameters Type Name Description String [] scopes The OpenID Connect scopes that the user must agree to String redirectUri The URI to which the browser should redirect after the successful login ParametersContainError(Dictionary<String, String>, out String) Checks if the provider included error messages in the parameters of a Web answer Declaration public bool ParametersContainError(Dictionary<string, string> parameters, out string errorMessage) Parameters Type Name Description Dictionary < String , String > parameters The parameters of a Web answer as a dictionary String errorMessage The error message that the provider included, empty if no error exists Returns Type Description Boolean Returns true if the parameters contain an error message, otherwise false Implements IOidcProvider"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.LearningLayersUserInfo.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.LearningLayersUserInfo.html",
    "title": "Class LearningLayersUserInfo | i5 Toolkit Documentation",
    "keywords": "Class LearningLayersUserInfo Description of the user information data for the Learning Layers client Inheritance Object LearningLayersUserInfo Implements IUserInfo Namespace : i5.Toolkit.Core.OpenIDConnectClient Assembly : cs.temp.dll.dll Syntax public class LearningLayersUserInfo : IUserInfo Constructors LearningLayersUserInfo(String, String, String) Creates a new instance of the learning layers user info with the given parameters Declaration public LearningLayersUserInfo(string username, string email, string fullName) Parameters Type Name Description String username The user name of the user String email The email address of the user String fullName The full name of the user Properties Email The email address of the user This is a mapping based on the available user data of the OIDC provider Declaration public string Email { get; } Property Value Type Description String FullName A clear name of the user This is a mapping based on the available user data of the OIDC provider Declaration public string FullName { get; } Property Value Type Description String Username The username of the user This is a mapping based on the available user data of the OIDC provider Declaration public string Username { get; } Property Value Type Description String Implements IUserInfo"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.OpenIDConnectService.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.OpenIDConnectService.html",
    "title": "Class OpenIDConnectService | i5 Toolkit Documentation",
    "keywords": "Class OpenIDConnectService Service that implements the OpenID Connect authentification Inheritance Object OpenIDConnectService Namespace : i5.Toolkit.Core.OpenIDConnectClient Assembly : cs.temp.dll.dll Syntax public class OpenIDConnectService : IUpdateableService Constructors OpenIDConnectService() Creates a new instance of the OpenID Connect service Declaration public OpenIDConnectService() Properties AccessToken The access token of the logged in user Use this token to access data about the user or to access protected Web resources Declaration public string AccessToken { get; } Property Value Type Description String Enabled If set to true, the Update method will be executed every frame Declaration public bool Enabled { get; set; } Property Value Type Description Boolean IsLoggedIn Is true if the user of the application is currently logged in Declaration public bool IsLoggedIn { get; } Property Value Type Description Boolean OidcProvider The provider that should be used for the OpenID Connect procedure Declaration public IOidcProvider OidcProvider { get; set; } Property Value Type Description IOidcProvider RedirectURI The URI which should be shown to the user after the login For UWP and Android apps, change the Uri schema to something unique and also change it in the project settings This way, the app will be opened again on the redirect. If this URI is not set, a standard page is shown. Declaration public string RedirectURI { get; set; } Property Value Type Description String Scopes List of scopes that the user must agree to and which give the client access to specific data Declaration public string[] Scopes { get; set; } Property Value Type Description String [] ServerListener A server listener implementation that listens for the redirect Declaration public IRedirectServerListener ServerListener { get; set; } Property Value Type Description IRedirectServerListener Methods CheckAccessToken() Checks if the access token is valid Declaration public Task<bool> CheckAccessToken() Returns Type Description Task < Boolean > Returns true if the access token could be verified at the provider Cleanup() Called by the service manager once the service is unregistered Stops the server if it is running and logs the user out Declaration public void Cleanup() GetUserDataAsync() Gets the user's information Declaration public Task<IUserInfo> GetUserDataAsync() Returns Type Description Task < IUserInfo > Returns user data from the OIDC provider Initialize(IServiceManager) Initialization which is called by the server manager once the service is registered Declaration public void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner The service manager that owns this service Logout() Logs the user out Declaration public void Logout() OpenLoginPage() Opens a login page in the system's default browser so that the user can log in Requires a configured OpenID Connect provider Declaration public void OpenLoginPage() ServerListener_RedirectReceived(Object, RedirectReceivedEventArgs) Called by the server listener once a redirect was received Declaration public void ServerListener_RedirectReceived(object sender, RedirectReceivedEventArgs e) Parameters Type Name Description Object sender The sender of the event RedirectReceivedEventArgs e The arguments of the redirect event Update() Called each frame by the service manager Handles the redirect processing on the main thread Declaration public void Update() Events LoginCompleted Event which is raised once the login was successfully completed Declaration public event EventHandler LoginCompleted Event Type Type Description EventHandler LogoutCompleted Event which is reaised once the logout was completed Declaration public event EventHandler LogoutCompleted Event Type Type Description EventHandler"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.PostBuildOidcPatcher.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.PostBuildOidcPatcher.html",
    "title": "Class PostBuildOidcPatcher | i5 Toolkit Documentation",
    "keywords": "Class PostBuildOidcPatcher Inheritance Object PostBuildOidcPatcher Namespace : i5.Toolkit.Core.OpenIDConnectClient Assembly : cs.temp.dll.dll Syntax public class PostBuildOidcPatcher"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.RedirectReceivedEventArgs.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.RedirectReceivedEventArgs.html",
    "title": "Class RedirectReceivedEventArgs | i5 Toolkit Documentation",
    "keywords": "Class RedirectReceivedEventArgs Event arguments for the redirect event Inheritance Object RedirectReceivedEventArgs Namespace : i5.Toolkit.Core.OpenIDConnectClient Assembly : cs.temp.dll.dll Syntax public class RedirectReceivedEventArgs : EventArgs Constructors RedirectReceivedEventArgs(Dictionary<String, String>, String) Creates a new instance of the redirect event arguments Declaration public RedirectReceivedEventArgs(Dictionary<string, string> requestParameters, string redirectUri) Parameters Type Name Description Dictionary < String , String > requestParameters The parameters that were given in the redirect String redirectUri The URI to which the redirect lead Properties RedirectParameters The parameters that were given in the redirect Declaration public Dictionary<string, string> RedirectParameters { get; } Property Value Type Description Dictionary < String , String > RedirectUri The URI to which the redirect lead Declaration public string RedirectUri { get; } Property Value Type Description String"
  },
  "api/i5.Toolkit.Core.OpenIDConnectClient.RedirectServerListener.html": {
    "href": "api/i5.Toolkit.Core.OpenIDConnectClient.RedirectServerListener.html",
    "title": "Class RedirectServerListener | i5 Toolkit Documentation",
    "keywords": "Class RedirectServerListener Implementation of a server that serves the redirect after the OpenID Connect login Inheritance Object RedirectServerListener Implements IRedirectServerListener Namespace : i5.Toolkit.Core.OpenIDConnectClient Assembly : cs.temp.dll.dll Syntax public class RedirectServerListener : IRedirectServerListener Constructors RedirectServerListener() Creates a new instance of the RedirectServerListener Declaration public RedirectServerListener() Properties ListeningUri The URI whrere the server listens for the redirect Declaration public string ListeningUri { get; set; } Property Value Type Description String ResponseString HTML response that is given on the redirect request Declaration public string ResponseString { get; set; } Property Value Type Description String ServerActive True if the server is active Declaration public bool ServerActive { get; } Property Value Type Description Boolean Methods GenerateListeningUri(String) Generates a redirect URI where the server can listen for the redirect Declaration public string GenerateListeningUri(string protocol = \"http\") Parameters Type Name Description String protocol Specify a custom URI schema. If the app version of this registers as a handler for the URI schema, the app will be opened again. Returns Type Description String Returns a free URI where the server can listen StartServer() Starts the server Declaration public void StartServer() StopServerImmediately() Stops the server immediately and aborts the current operation Declaration public void StopServerImmediately() Events RedirectReceived Event which is raised once a redirect is received Declaration public event EventHandler<RedirectReceivedEventArgs> RedirectReceived Event Type Type Description EventHandler < RedirectReceivedEventArgs > Implements IRedirectServerListener"
  },
  "api/i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor.html": {
    "href": "api/i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor.html",
    "title": "Class GeometryConstructor | i5 Toolkit Documentation",
    "keywords": "Class GeometryConstructor Utility class which guides the construction of meshes Provides helper methods to register vertices and create faces of different shapes Inheritance Object GeometryConstructor Namespace : i5.Toolkit.Core.ProceduralGeometry Assembly : cs.temp.dll.dll Syntax public class GeometryConstructor Constructors GeometryConstructor() Creates the geometry constructor to buid the mesh data You can only add geometry, not remove it Declaration public GeometryConstructor() Properties Name The name of the produced mesh Declaration public string Name { get; set; } Property Value Type Description String Normals Manually set normals Declaration public List<Vector3> Normals { get; } Property Value Type Description List < Vector3 > Triangles The triangles/faces of the geometry object Declaration public List<int> Triangles { get; } Property Value Type Description List < Int32 > UVCoords Manually set UV coords Declaration public List<Vector2> UVCoords { get; } Property Value Type Description List < Vector2 > Vertices The vertices of the geometry object Declaration public List<Vector3> Vertices { get; } Property Value Type Description List < Vector3 > Methods AddQuad(Int32, Int32, Int32, Int32, Boolean) Adds a quad to the geometry (by adding two triangles) List the four vertices in clockwise order as seen from the outside The diagonal will be created between the first and third vertex The indices must exist in the geometry, i.e. they first need to be added using AddVertex() Declaration public void AddQuad(int v0, int v1, int v2, int v3, bool flipNormals = false) Parameters Type Name Description Int32 v0 Index of vertex 1 Int32 v1 Index of vertex 2 Int32 v2 Index of vertex 3 Int32 v3 Index of vertex 4 Boolean flipNormals If set to true, the quad will face the other way AddTriangle(Int32, Int32, Int32, Boolean) Adds a triangle to the geometry List the three vertices in clockwise order as seen from the outside The indices must exist in the geometry, i.e. they first need to be added using AddVertex() Declaration public void AddTriangle(int v0, int v1, int v2, bool flipNormal = false) Parameters Type Name Description Int32 v0 Index of vertex 1 Int32 v1 Index of vertex 2 Int32 v2 Index of vertex 3 Boolean flipNormal If set to true, the triangle will face the other way AddTriangleFan(Int32, Int32[], Boolean) Adds a fan of triangles to the geometry List the otherVertices clockwise The indices must exist in the geometry, i.e. they first need to be added using AddVertex() Declaration public void AddTriangleFan(int poleVertex, int[] otherVertices, bool flipNormals = false) Parameters Type Name Description Int32 poleVertex The pole vertex which is connected to all other vertices of the fan Int32 [] otherVertices The vertices which span the fan Boolean flipNormals If set to true, the triangle fan will face the other way AddVertex(Vector3) Adds a disconnected, unnamed vertex to the geometry Declaration public int AddVertex(Vector3 coordinates) Parameters Type Name Description Vector3 coordinates The coordinates of the vertex Returns Type Description Int32 The index of the created vertex AddVertex(Vector3, Vector2) Adds a disconnected vertex to the geometry with the given coordinates and UV coordinates Declaration public int AddVertex(Vector3 coordinates, Vector2 uvCoordinates) Parameters Type Name Description Vector3 coordinates The 3D coordinates of the vertex Vector2 uvCoordinates The texture UV coordinates of the vertex Returns Type Description Int32 Returns the index of the created vertex AddVertex(Vector3, Vector2, Vector3) Adds a disconnected vertex to the geometry with the given coordinates, UV coordinates and normal vector Declaration public int AddVertex(Vector3 coordinates, Vector2 uvCoordinates, Vector3 normalVector) Parameters Type Name Description Vector3 coordinates The 3D coordinates of the vertex Vector2 uvCoordinates The texture UV coordinates of the vertex Vector3 normalVector The normal vector of the vertex Returns Type Description Int32 Returns the index of the created vertex AddVertex(Vector3, Vector3) Adds a disconnected vertex to the geometry with a given normal vector The normal vector is only used if a normal vector is supplied for every vertex Declaration public int AddVertex(Vector3 coordinates, Vector3 normalVector) Parameters Type Name Description Vector3 coordinates The coordinates of the vertex Vector3 normalVector The normal vector which should be used Returns Type Description Int32 The index of the created vertex ConstructMesh() Builds a mesh from the constructed geometry data Declaration public Mesh ConstructMesh() Returns Type Description Mesh The constructed mesh which is described by these geometry data"
  },
  "api/i5.Toolkit.Core.ProceduralGeometry.html": {
    "href": "api/i5.Toolkit.Core.ProceduralGeometry.html",
    "title": "Namespace i5.Toolkit.Core.ProceduralGeometry | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.ProceduralGeometry Classes GeometryConstructor Utility class which guides the construction of meshes Provides helper methods to register vertices and create faces of different shapes MaterialConstructor Construction object to store properties of materials to create them later ObjectConstructor Class for constructing objects on demand TextureConstructor Constructs a texture by fetching it from the Web Interfaces ITextureConstructor Interface for texture constructors"
  },
  "api/i5.Toolkit.Core.ProceduralGeometry.ITextureConstructor.html": {
    "href": "api/i5.Toolkit.Core.ProceduralGeometry.ITextureConstructor.html",
    "title": "Interface ITextureConstructor | i5 Toolkit Documentation",
    "keywords": "Interface ITextureConstructor Interface for texture constructors Namespace : i5.Toolkit.Core.ProceduralGeometry Assembly : cs.temp.dll.dll Syntax public interface ITextureConstructor Methods FetchTextureAsync() Asynchronously fetches a texture Declaration Task<Texture2D> FetchTextureAsync() Returns Type Description Task < Texture2D >"
  },
  "api/i5.Toolkit.Core.ProceduralGeometry.MaterialConstructor.html": {
    "href": "api/i5.Toolkit.Core.ProceduralGeometry.MaterialConstructor.html",
    "title": "Class MaterialConstructor | i5 Toolkit Documentation",
    "keywords": "Class MaterialConstructor Construction object to store properties of materials to create them later Inheritance Object MaterialConstructor Namespace : i5.Toolkit.Core.ProceduralGeometry Assembly : cs.temp.dll.dll Syntax public class MaterialConstructor Constructors MaterialConstructor() Initializes the material constructor with default values Declaration public MaterialConstructor() MaterialConstructor(String) Initializes the material constructor with a given shader Declaration public MaterialConstructor(string shaderName) Parameters Type Name Description String shaderName The name of the shader Properties Color The main color of the material Declaration public Color Color { get; set; } Property Value Type Description Color Name The name of the material Declaration public string Name { get; set; } Property Value Type Description String ShaderName The name of the shader that the material should use Declaration public string ShaderName { get; set; } Property Value Type Description String Methods ConstructMaterial() Constructs a material from the specified data in this constructor Declaration public Material ConstructMaterial() Returns Type Description Material Returns the constructed material FetchDependencies() Fetches any dependencies of the material, e.g. textures Call this method before constructing the material Declaration public Task<bool> FetchDependencies() Returns Type Description Task < Boolean > True if all dependencies could be fetched SetFloat(String, Single) Sets a float property in the material Declaration public void SetFloat(string name, float value) Parameters Type Name Description String name The name of the float property in the shader Single value The value of the float property SetTexture(String, ITextureConstructor) Sets a texture request for the material Declaration public void SetTexture(string name, ITextureConstructor value) Parameters Type Name Description String name The name of the texture property in the shader ITextureConstructor value The texture constructor which fetches the texture"
  },
  "api/i5.Toolkit.Core.ProceduralGeometry.ObjectConstructor.html": {
    "href": "api/i5.Toolkit.Core.ProceduralGeometry.ObjectConstructor.html",
    "title": "Class ObjectConstructor | i5 Toolkit Documentation",
    "keywords": "Class ObjectConstructor Class for constructing objects on demand Inheritance Object ObjectConstructor Namespace : i5.Toolkit.Core.ProceduralGeometry Assembly : cs.temp.dll.dll Syntax public class ObjectConstructor Constructors ObjectConstructor() Creates the object constructor with empty geometry and material constructors Declaration public ObjectConstructor() ObjectConstructor(GeometryConstructor) Creates the object constructor with the given geometry constructor Declaration public ObjectConstructor(GeometryConstructor geometryConstructor) Parameters Type Name Description GeometryConstructor geometryConstructor Geometry constructor to initialize the object ObjectConstructor(GeometryConstructor, MaterialConstructor) Creates the object constructor with the given geometry and material constructors Declaration public ObjectConstructor(GeometryConstructor geometryConstructor, MaterialConstructor material) Parameters Type Name Description GeometryConstructor geometryConstructor Geometry constructor to initialize the object MaterialConstructor material Material constructor to initialize the object Properties GeometryConstructor Constructor which defines the object's geometry Declaration public GeometryConstructor GeometryConstructor { get; set; } Property Value Type Description GeometryConstructor MaterialConstructor Constructor which defines the object's material Declaration public MaterialConstructor MaterialConstructor { get; set; } Property Value Type Description MaterialConstructor Methods ConstructObject(Transform) Constructs a GameObject and populates it with the mesh of the geometry constructor and the material of the material constructor Declaration public GameObject ConstructObject(Transform parent = null) Parameters Type Name Description Transform parent Optional; Parents the GameObject to the specified transform Returns Type Description GameObject Returns the created GameObject"
  },
  "api/i5.Toolkit.Core.ProceduralGeometry.TextureConstructor.html": {
    "href": "api/i5.Toolkit.Core.ProceduralGeometry.TextureConstructor.html",
    "title": "Class TextureConstructor | i5 Toolkit Documentation",
    "keywords": "Class TextureConstructor Constructs a texture by fetching it from the Web Inheritance Object TextureConstructor Implements ITextureConstructor Namespace : i5.Toolkit.Core.ProceduralGeometry Assembly : cs.temp.dll.dll Syntax public class TextureConstructor : ITextureConstructor Constructors TextureConstructor(String) Creates a texture constructor with the given load path Declaration public TextureConstructor(string loadPath) Parameters Type Name Description String loadPath The path where the texture is stored Properties LoadPath The path where the texture is stored Declaration public string LoadPath { get; set; } Property Value Type Description String TextureLoader Module which loads the object Declaration public IContentLoader<Texture2D> TextureLoader { get; set; } Property Value Type Description IContentLoader < Texture2D > Methods FetchTextureAsync() Fetches the texture from the Web based on the LoadPath Declaration public Task<Texture2D> FetchTextureAsync() Returns Type Description Task < Texture2D > Returns the fetched texture or null if something went wrong Implements ITextureConstructor"
  },
  "api/i5.Toolkit.Core.SceneDocumentation.DocumentationObject.html": {
    "href": "api/i5.Toolkit.Core.SceneDocumentation.DocumentationObject.html",
    "title": "Class DocumentationObject | i5 Toolkit Documentation",
    "keywords": "Class DocumentationObject A special component which provides documentation information in the editor Inheritance Object DocumentationObject Namespace : i5.Toolkit.Core.SceneDocumentation Assembly : cs.temp.dll.dll Syntax public class DocumentationObject : MonoBehaviour Fields description A description of the documented highlight Declaration public string description Field Value Type Description String title The title of the documentation Declaration public string title Field Value Type Description String type The type of documentation (e.g. information, todo mark or bug mark) Based on this, the icon is changed Declaration public DocumentationType type Field Value Type Description DocumentationType url A url to further documentation on the matter Declaration public string url Field Value Type Description String"
  },
  "api/i5.Toolkit.Core.SceneDocumentation.DocumentationType.html": {
    "href": "api/i5.Toolkit.Core.SceneDocumentation.DocumentationType.html",
    "title": "Enum DocumentationType | i5 Toolkit Documentation",
    "keywords": "Enum DocumentationType The different types of Documentation which are available Namespace : i5.Toolkit.Core.SceneDocumentation Assembly : cs.temp.dll.dll Syntax public enum DocumentationType Fields Name Description BUG INFO NO_ICON TODO"
  },
  "api/i5.Toolkit.Core.SceneDocumentation.html": {
    "href": "api/i5.Toolkit.Core.SceneDocumentation.html",
    "title": "Namespace i5.Toolkit.Core.SceneDocumentation | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.SceneDocumentation Classes DocumentationObject A special component which provides documentation information in the editor Enums DocumentationType The different types of Documentation which are available"
  },
  "api/i5.Toolkit.Core.ServiceCore.AsyncThreadedWorkerService-1.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.AsyncThreadedWorkerService-1.html",
    "title": "Class AsyncThreadedWorkerService<OperationType> | i5 Toolkit Documentation",
    "keywords": "Class AsyncThreadedWorkerService<OperationType> Threaded worker service which can perform operations asynchronously on other threads Inheritance Object AsyncThreadedWorkerService<OperationType> Implements IUpdateableService IService Namespace : i5.Toolkit.Core.ServiceCore Assembly : cs.temp.dll.dll Syntax public class AsyncThreadedWorkerService<OperationType> : IUpdateableService, IService where OperationType : IOperation Type Parameters Name Description OperationType The type of operation that should be performed Properties Enabled If set to true, the update routine will run every frame Declaration public bool Enabled { get; set; } Property Value Type Description Boolean Methods AddOperation(OperationType) Adds an operation to the queue of operations to execute on a separate thread Declaration public void AddOperation(OperationType operation) Parameters Type Name Description OperationType operation The operation which should be executed AsyncOperation(OperationType) Declaration protected virtual void AsyncOperation(OperationType operation) Parameters Type Name Description OperationType operation Cleanup() Called by the ServiceManager to clean the service up when it is removed Declaration public void Cleanup() Initialize(IServiceManager) Called by the ServiceManager to initialize the service Declaration public void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner Update() Called by the ServiceManager every frame If there is an operation waiting to be executed, it will be started If there are finished operations available, their callback method is called Declaration public void Update() Implements IUpdateableService IService"
  },
  "api/i5.Toolkit.Core.ServiceCore.BaseServiceBootstrapper.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.BaseServiceBootstrapper.html",
    "title": "Class BaseServiceBootstrapper | i5 Toolkit Documentation",
    "keywords": "Class BaseServiceBootstrapper A bootstrapper base class which handles the service initialization Inheritance Object BaseServiceBootstrapper Namespace : i5.Toolkit.Core.ServiceCore Assembly : cs.temp.dll.dll Syntax public abstract class BaseServiceBootstrapper : MonoBehaviour Methods OnDestroy() Declaration protected virtual void OnDestroy() RegisterServices() Declaration protected abstract void RegisterServices() Start() Declaration protected virtual void Start() UnRegisterServices() Declaration protected abstract void UnRegisterServices()"
  },
  "api/i5.Toolkit.Core.ServiceCore.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.html",
    "title": "Namespace i5.Toolkit.Core.ServiceCore | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.ServiceCore Classes AsyncThreadedWorkerService<OperationType> Threaded worker service which can perform operations asynchronously on other threads BaseServiceBootstrapper A bootstrapper base class which handles the service initialization Operation<ResultType> The operation to execute ServiceManager Manager which administers registered services These services need to implement the IService interface and do not need to inherit from MonoBehaviour ServiceManagerRunner The runner which provides MonoBehaviour events to an IRunnerReceiver Interfaces IOperation Contract which defines the interface of an operation IRunnerReceiver Contract which defines which methods a MonoBehaviour runner can access This can be used to provide MonoBehaviour events to non-MonoBehaviours IService Contract which defines the capabilities of a service IServiceManager Contract which defines how to interact with service manager implementations IUpdateableService A service which can execute code every frame Enums OperationStatus The possible states of an operation"
  },
  "api/i5.Toolkit.Core.ServiceCore.IOperation.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.IOperation.html",
    "title": "Interface IOperation | i5 Toolkit Documentation",
    "keywords": "Interface IOperation Contract which defines the interface of an operation Namespace : i5.Toolkit.Core.ServiceCore Assembly : cs.temp.dll.dll Syntax public interface IOperation Methods ReturnCallback() Declaration void ReturnCallback()"
  },
  "api/i5.Toolkit.Core.ServiceCore.IRunnerReceiver.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.IRunnerReceiver.html",
    "title": "Interface IRunnerReceiver | i5 Toolkit Documentation",
    "keywords": "Interface IRunnerReceiver Contract which defines which methods a MonoBehaviour runner can access This can be used to provide MonoBehaviour events to non-MonoBehaviours Namespace : i5.Toolkit.Core.ServiceCore Assembly : cs.temp.dll.dll Syntax public interface IRunnerReceiver Methods OnRunnerDestroyed() Called to inform the receiver that the runner object is destroyed Declaration void OnRunnerDestroyed() Update() Called every frame by the runner Declaration void Update()"
  },
  "api/i5.Toolkit.Core.ServiceCore.IService.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.IService.html",
    "title": "Interface IService | i5 Toolkit Documentation",
    "keywords": "Interface IService Contract which defines the capabilities of a service Namespace : i5.Toolkit.Core.ServiceCore Assembly : cs.temp.dll.dll Syntax public interface IService Methods Cleanup() Cleans up the service when it is unregistered at the service manager Declaration void Cleanup() Initialize(IServiceManager) Initializes the service Declaration void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner The IServiceManager which owns this service"
  },
  "api/i5.Toolkit.Core.ServiceCore.IServiceManager.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.IServiceManager.html",
    "title": "Interface IServiceManager | i5 Toolkit Documentation",
    "keywords": "Interface IServiceManager Contract which defines how to interact with service manager implementations Namespace : i5.Toolkit.Core.ServiceCore Assembly : cs.temp.dll.dll Syntax public interface IServiceManager Properties Runner The runner object which provides MonoBehaviour events to the service manager This can also be used by services to access MonoBehaviour functionality, e.g. for running co-routines Declaration ServiceManagerRunner Runner { get; } Property Value Type Description ServiceManagerRunner Methods InstGetService<T>() Retrieves the reference to a registered service of the given type Declaration T InstGetService<T>() where T : IService Returns Type Description T Returns the reference to the service Type Parameters Name Description T The type of service InstRegisterService<T>(T) Registers a new service Declaration void InstRegisterService<T>(T service) where T : IService Parameters Type Name Description T service The service to register Type Parameters Name Description T The type of service InstRemoveService<T>() Removes a service from the service manager Declaration void InstRemoveService<T>() where T : IService Type Parameters Name Description T The type of service InstServiceExists<T>() Checks if a service of the given type has been registered at the service manager Declaration bool InstServiceExists<T>() where T : IService Returns Type Description Boolean Returns true if a service with the given type exists at the service manager Type Parameters Name Description T The type of the service"
  },
  "api/i5.Toolkit.Core.ServiceCore.IUpdateableService.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.IUpdateableService.html",
    "title": "Interface IUpdateableService | i5 Toolkit Documentation",
    "keywords": "Interface IUpdateableService A service which can execute code every frame Inherited Members IService.Initialize(IServiceManager) IService.Cleanup() Namespace : i5.Toolkit.Core.ServiceCore Assembly : cs.temp.dll.dll Syntax public interface IUpdateableService : IService Properties Enabled If set to true, the update function is executed every frame; otherwise the service is disabled Declaration bool Enabled { get; set; } Property Value Type Description Boolean Methods Update() Called by the service manager and executed every frame Declaration void Update()"
  },
  "api/i5.Toolkit.Core.ServiceCore.Operation-1.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.Operation-1.html",
    "title": "Class Operation<ResultType> | i5 Toolkit Documentation",
    "keywords": "Class Operation<ResultType> The operation to execute Inheritance Object Operation<ResultType> Implements IOperation Namespace : i5.Toolkit.Core.ServiceCore Assembly : cs.temp.dll.dll Syntax public class Operation<ResultType> : IOperation Type Parameters Name Description ResultType The type of the operation's return value Constructors Operation(Action<Operation<ResultType>>) Creates a new operation instance with the given callback method Declaration public Operation(Action<Operation<ResultType>> callback) Parameters Type Name Description Action < Operation <ResultType>> callback The callback method which is invoked once the operation has finished Fields callback The callback method which is invoked once the operation has finished The call will provide the result Declaration public Action<Operation<ResultType>> callback Field Value Type Description Action < Operation <ResultType>> result The result of the operation once it is finished Declaration public ResultType result Field Value Type Description ResultType status The status of the operation Declaration public OperationStatus status Field Value Type Description OperationStatus Methods ReturnCallback() Invokes the callback method Declaration public void ReturnCallback() Implements IOperation"
  },
  "api/i5.Toolkit.Core.ServiceCore.OperationStatus.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.OperationStatus.html",
    "title": "Enum OperationStatus | i5 Toolkit Documentation",
    "keywords": "Enum OperationStatus The possible states of an operation Namespace : i5.Toolkit.Core.ServiceCore Assembly : cs.temp.dll.dll Syntax public enum OperationStatus Fields Name Description ERROR SUCCESS WORKING"
  },
  "api/i5.Toolkit.Core.ServiceCore.ServiceManager.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.ServiceManager.html",
    "title": "Class ServiceManager | i5 Toolkit Documentation",
    "keywords": "Class ServiceManager Manager which administers registered services These services need to implement the IService interface and do not need to inherit from MonoBehaviour Inheritance Object ServiceManager Implements IServiceManager IRunnerReceiver Namespace : i5.Toolkit.Core.ServiceCore Assembly : cs.temp.dll.dll Syntax public class ServiceManager : IServiceManager, IRunnerReceiver Constructors ServiceManager() Creates a new instance of a ServiceManager Declaration public ServiceManager() Properties Instance The instance of the service manager Declaration public static ServiceManager Instance { get; } Property Value Type Description ServiceManager Runner The runner in the scene This runner object provides MonoBehaviour events to the service manager It can be accessed by servies to run MonoBehaviour functionality, e.g. co-routines Declaration public ServiceManagerRunner Runner { get; } Property Value Type Description ServiceManagerRunner Methods GetService<T>() Gets the service instance with the given type Declaration public static T GetService<T>() where T : IService Returns Type Description T Returns the registered service instance Type Parameters Name Description T The type of service InstGetService<T>() Gets the service instance with the given type that is registered at this instance Declaration public T InstGetService<T>() where T : IService Returns Type Description T Returns the registered service instance Type Parameters Name Description T The type of service InstRegisterService<T>(T) Instance method for registering a new service Declaration public void InstRegisterService<T>(T service) where T : IService Parameters Type Name Description T service The service instance which should be registered Type Parameters Name Description T The type of service InstRemoveService<T>() Removes a service with the given type from this ServiceManager instance Declaration public void InstRemoveService<T>() where T : IService Type Parameters Name Description T The type of service InstServiceExists<T>() Checks if a service with the given type exists at this instance Declaration public bool InstServiceExists<T>() where T : IService Returns Type Description Boolean Returns true if a service of the given type was registered at this instance Type Parameters Name Description T The type of service OnRunnerDestroyed() Called if the runner object is destroyed Makes sure that the runner persists if it was destroyed by some other script Declaration public void OnRunnerDestroyed() RegisterService<T>(T) Registers a new service at the service manager Declaration public static void RegisterService<T>(T service) where T : IService Parameters Type Name Description T service The service instance which should be registered at the ServiceManager Type Parameters Name Description T The type of service RemoveService<T>() Removes a service with the given type from the ServiceManager Declaration public static void RemoveService<T>() where T : IService Type Parameters Name Description T The type of service ServiceExists<T>() Checks if a service with the given type exists at the ServiceManager Declaration public static bool ServiceExists<T>() where T : IService Returns Type Description Boolean Returns true if a service of the given type was registered Type Parameters Name Description T The type of service Update() Called by the update runner Updates the updateable services Declaration public void Update() Implements IServiceManager IRunnerReceiver"
  },
  "api/i5.Toolkit.Core.ServiceCore.ServiceManagerRunner.html": {
    "href": "api/i5.Toolkit.Core.ServiceCore.ServiceManagerRunner.html",
    "title": "Class ServiceManagerRunner | i5 Toolkit Documentation",
    "keywords": "Class ServiceManagerRunner The runner which provides MonoBehaviour events to an IRunnerReceiver Inheritance Object ServiceManagerRunner Namespace : i5.Toolkit.Core.ServiceCore Assembly : cs.temp.dll.dll Syntax public class ServiceManagerRunner : MonoBehaviour Methods Initialize(IRunnerReceiver) Initializes the runner by assigning the runner receiver Declaration public void Initialize(IRunnerReceiver runnerReceiver) Parameters Type Name Description IRunnerReceiver runnerReceiver The runner receiver that should receive the MonoBehaviour events"
  },
  "api/i5.Toolkit.Core.Spawners.html": {
    "href": "api/i5.Toolkit.Core.Spawners.html",
    "title": "Namespace i5.Toolkit.Core.Spawners | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Spawners Classes Spawner Spawner which can instantiate one prefab object in the scene"
  },
  "api/i5.Toolkit.Core.Spawners.Spawner.html": {
    "href": "api/i5.Toolkit.Core.Spawners.Spawner.html",
    "title": "Class Spawner | i5 Toolkit Documentation",
    "keywords": "Class Spawner Spawner which can instantiate one prefab object in the scene Inheritance Object Spawner Namespace : i5.Toolkit.Core.Spawners Assembly : cs.temp.dll.dll Syntax public class Spawner : MonoBehaviour Fields destroyWithSpawner Declaration protected bool destroyWithSpawner Field Value Type Description Boolean maxNumberOfInstances Declaration protected int maxNumberOfInstances Field Value Type Description Int32 overwriteExistingInstances Declaration protected bool overwriteExistingInstances Field Value Type Description Boolean prefab Declaration protected GameObject prefab Field Value Type Description GameObject spawnedInstanceQueue Declaration protected Queue<GameObject> spawnedInstanceQueue Field Value Type Description System.Collections.Queue < GameObject > spawnOnAwake Declaration protected bool spawnOnAwake Field Value Type Description Boolean Properties DestroyWithSpawner If true, the spawned instance will be destroyed if the spawner is destroyed Declaration public bool DestroyWithSpawner { get; set; } Property Value Type Description Boolean MostRecentlySpawnedObject Returns the most recently spawned object Declaration public GameObject MostRecentlySpawnedObject { get; } Property Value Type Description GameObject OverwriteExistingInstances If true, multiple calls of Spawn() will destroy existing instances in the scene Otherwise Spawn() will only work if no instance exists in the scene Declaration public bool OverwriteExistingInstances { get; set; } Property Value Type Description Boolean SpawnedInstances The instance which was created by this spawner Declaration public GameObject[] SpawnedInstances { get; } Property Value Type Description GameObject [] Methods Awake() Initiates a spawn if spawnOnAwake is true Declaration protected virtual void Awake() OnDestroy() Called if the spawner is destroyed. If destroyWithSpawner was checked, the spawned instance will also be destroyed Declaration protected virtual void OnDestroy() Setup(GameObject) This method can be overwritten to setup the spawned instance immediately after it has been created Declaration protected virtual void Setup(GameObject instance) Parameters Type Name Description GameObject instance Spawn() Spawns the object instance Note that the spawn may fail, e.g. if the instance already existed and may not be overwritten Declaration public bool Spawn() Returns Type Description Boolean True if the spawn process was successful"
  },
  "api/i5.Toolkit.Core.TestHelpers.AsyncTest.html": {
    "href": "api/i5.Toolkit.Core.TestHelpers.AsyncTest.html",
    "title": "Class AsyncTest | i5 Toolkit Documentation",
    "keywords": "Class AsyncTest Utilities for asynchronous tests Inheritance Object AsyncTest Namespace : i5.Toolkit.Core.TestHelpers Assembly : cs.temp.dll.dll Syntax public static class AsyncTest Methods WaitForTask(Task) Waits for the given task to complete Use this instead of await in Unit tests. Unity's NUnit version cannot handle Task methods to yield on await Hence, the asynchronous tests must be marked as UnityTests. Awaitable calls are replaced with an assignment to a Task object Declaration public static IEnumerator WaitForTask(Task task) Parameters Type Name Description Task task The task object to await Returns Type Description IEnumerator"
  },
  "api/i5.Toolkit.Core.TestHelpers.html": {
    "href": "api/i5.Toolkit.Core.TestHelpers.html",
    "title": "Namespace i5.Toolkit.Core.TestHelpers | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.TestHelpers Classes AsyncTest Utilities for asynchronous tests InvalidPlatformException PlayModeTestUtilities"
  },
  "api/i5.Toolkit.Core.TestHelpers.InvalidPlatformException.html": {
    "href": "api/i5.Toolkit.Core.TestHelpers.InvalidPlatformException.html",
    "title": "Class InvalidPlatformException | i5 Toolkit Documentation",
    "keywords": "Class InvalidPlatformException Inheritance Object InvalidPlatformException Namespace : i5.Toolkit.Core.TestHelpers Assembly : cs.temp.dll.dll Syntax public class InvalidPlatformException : Exception Constructors InvalidPlatformException() Declaration public InvalidPlatformException() InvalidPlatformException(String) Declaration public InvalidPlatformException(string message) Parameters Type Name Description String message InvalidPlatformException(String, Exception) Declaration public InvalidPlatformException(string message, Exception inner) Parameters Type Name Description String message Exception inner"
  },
  "api/i5.Toolkit.Core.TestHelpers.PlayModeTestUtilities.html": {
    "href": "api/i5.Toolkit.Core.TestHelpers.PlayModeTestUtilities.html",
    "title": "Class PlayModeTestUtilities | i5 Toolkit Documentation",
    "keywords": "Class PlayModeTestUtilities Inheritance Object PlayModeTestUtilities Namespace : i5.Toolkit.Core.TestHelpers Assembly : cs.temp.dll.dll Syntax public static class PlayModeTestUtilities Methods LoadEmptyTestScene() Declaration public static void LoadEmptyTestScene() UnloadTestScene() Declaration public static void UnloadTestScene()"
  },
  "api/i5.Toolkit.Core.TestUtilities.FakeContentLoaderFactory.html": {
    "href": "api/i5.Toolkit.Core.TestUtilities.FakeContentLoaderFactory.html",
    "title": "Class FakeContentLoaderFactory | i5 Toolkit Documentation",
    "keywords": "Class FakeContentLoaderFactory Inheritance Object FakeContentLoaderFactory Namespace : i5.Toolkit.Core.TestUtilities Assembly : cs.temp.dll.dll Syntax public static class FakeContentLoaderFactory Methods CreateFakeFailLoader<T>() Declaration public static IContentLoader<T> CreateFakeFailLoader<T>() Returns Type Description IContentLoader <T> Type Parameters Name Description T CreateFakeLoader<T>(T) Declaration public static IContentLoader<T> CreateFakeLoader<T>(T content) Parameters Type Name Description T content Returns Type Description IContentLoader <T> Type Parameters Name Description T"
  },
  "api/i5.Toolkit.Core.TestUtilities.html": {
    "href": "api/i5.Toolkit.Core.TestUtilities.html",
    "title": "Namespace i5.Toolkit.Core.TestUtilities | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.TestUtilities Classes FakeContentLoaderFactory TestObject An object for Object Pool tests TestUpdateService"
  },
  "api/i5.Toolkit.Core.TestUtilities.TestObject.html": {
    "href": "api/i5.Toolkit.Core.TestUtilities.TestObject.html",
    "title": "Class TestObject | i5 Toolkit Documentation",
    "keywords": "Class TestObject An object for Object Pool tests Inheritance Object TestObject Namespace : i5.Toolkit.Core.TestUtilities Assembly : cs.temp.dll.dll Syntax public class TestObject Constructors TestObject(Int32) Declaration public TestObject(int id) Parameters Type Name Description Int32 id Properties Id Declaration public int Id { get; } Property Value Type Description Int32"
  },
  "api/i5.Toolkit.Core.TestUtilities.TestUpdateService.html": {
    "href": "api/i5.Toolkit.Core.TestUtilities.TestUpdateService.html",
    "title": "Class TestUpdateService | i5 Toolkit Documentation",
    "keywords": "Class TestUpdateService Inheritance Object TestUpdateService Namespace : i5.Toolkit.Core.TestUtilities Assembly : cs.temp.dll.dll Syntax public class TestUpdateService : IUpdateableService Properties Enabled Declaration public bool Enabled { get; set; } Property Value Type Description Boolean TestCounter Declaration public int TestCounter { get; } Property Value Type Description Int32 Methods Cleanup() Declaration public void Cleanup() Initialize(IServiceManager) Declaration public void Initialize(IServiceManager owner) Parameters Type Name Description IServiceManager owner Update() Declaration public void Update()"
  },
  "api/i5.Toolkit.Core.TestUtilities.UIOperator.html": {
    "href": "api/i5.Toolkit.Core.TestUtilities.UIOperator.html",
    "title": "Namespace i5.Toolkit.Core.TestUtilities.UIOperator | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.TestUtilities.UIOperator Classes UiElementNotFoundException UiOperator"
  },
  "api/i5.Toolkit.Core.TestUtilities.UIOperator.UiElementNotFoundException.html": {
    "href": "api/i5.Toolkit.Core.TestUtilities.UIOperator.UiElementNotFoundException.html",
    "title": "Class UiElementNotFoundException | i5 Toolkit Documentation",
    "keywords": "Class UiElementNotFoundException Inheritance Object UiElementNotFoundException Namespace : i5.Toolkit.Core.TestUtilities.UIOperator Assembly : cs.temp.dll.dll Syntax public class UiElementNotFoundException : Exception Constructors UiElementNotFoundException() Declaration public UiElementNotFoundException() UiElementNotFoundException(String) Declaration public UiElementNotFoundException(string message) Parameters Type Name Description String message UiElementNotFoundException(String, Exception) Declaration public UiElementNotFoundException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException Methods Create(GameObject, MonoBehaviour) Declaration public static UiElementNotFoundException Create(GameObject go, MonoBehaviour monoBehaviour) Parameters Type Name Description GameObject go MonoBehaviour monoBehaviour Returns Type Description UiElementNotFoundException"
  },
  "api/i5.Toolkit.Core.TestUtilities.UIOperator.UiOperator.html": {
    "href": "api/i5.Toolkit.Core.TestUtilities.UIOperator.UiOperator.html",
    "title": "Class UiOperator | i5 Toolkit Documentation",
    "keywords": "Class UiOperator Inheritance Object UiOperator Namespace : i5.Toolkit.Core.TestUtilities.UIOperator Assembly : cs.temp.dll.dll Syntax public static class UiOperator Methods InputFieldEndEdit(InputField) Declaration public static void InputFieldEndEdit(InputField inputField) Parameters Type Name Description InputField inputField InputFieldEndEdit(String) Declaration public static void InputFieldEndEdit(string inputFieldName) Parameters Type Name Description String inputFieldName PressButton(Button) Declaration public static void PressButton(Button button) Parameters Type Name Description Button button PressButton(String) Declaration public static void PressButton(string buttonName) Parameters Type Name Description String buttonName SetDropdownIndex(Dropdown, Int32) Declaration public static void SetDropdownIndex(Dropdown dropdown, int index) Parameters Type Name Description Dropdown dropdown Int32 index SetDropdownIndex(String, Int32) Declaration public static void SetDropdownIndex(string dropdownName, int index) Parameters Type Name Description String dropdownName Int32 index SetInputFieldText(InputField, String) Declaration public static void SetInputFieldText(InputField inputField, string text) Parameters Type Name Description InputField inputField String text SetInputFieldText(String, String) Declaration public static void SetInputFieldText(string inputFieldName, string text) Parameters Type Name Description String inputFieldName String text SetScrollbarValue(Scrollbar, Single) Declaration public static void SetScrollbarValue(Scrollbar scrollbar, float value) Parameters Type Name Description Scrollbar scrollbar Single value SetScrollbarValue(String, Single) Declaration public static void SetScrollbarValue(string scrollBarName, float value) Parameters Type Name Description String scrollBarName Single value SetScrollRectValue(ScrollRect, Vector2) Declaration public static void SetScrollRectValue(ScrollRect scrollRect, Vector2 value) Parameters Type Name Description ScrollRect scrollRect Vector2 value SetScrollRectValue(String, Vector2) Declaration public static void SetScrollRectValue(string scrollRectName, Vector2 value) Parameters Type Name Description String scrollRectName Vector2 value SetSliderValue(Slider, Single) Declaration public static void SetSliderValue(Slider slider, float value) Parameters Type Name Description Slider slider Single value SetSliderValue(String, Single) Declaration public static void SetSliderValue(string sliderName, float value) Parameters Type Name Description String sliderName Single value SetToggleValue(String, Boolean) Declaration public static void SetToggleValue(string toggleName, bool value) Parameters Type Name Description String toggleName Boolean value SetToggleValue(Toggle, Boolean) Declaration public static void SetToggleValue(Toggle toggle, bool value) Parameters Type Name Description Toggle toggle Boolean value ToggleToggle(String) Declaration public static void ToggleToggle(string toggleName) Parameters Type Name Description String toggleName ToggleToggle(Toggle) Declaration public static void ToggleToggle(Toggle toggle) Parameters Type Name Description Toggle toggle"
  },
  "api/i5.Toolkit.Core.Utilities.Async.AwaiterExtensions.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Async.AwaiterExtensions.html",
    "title": "Class AwaiterExtensions | i5 Toolkit Documentation",
    "keywords": "Class AwaiterExtensions We could just add a generic GetAwaiter to YieldInstruction and CustomYieldInstruction but instead we add specific methods to each derived class to allow for return values that make the most sense for the specific instruction type. Inheritance Object AwaiterExtensions Namespace : i5.Toolkit.Core.Utilities.Async Assembly : cs.temp.dll.dll Syntax public static class AwaiterExtensions Methods GetAwaiter(AssetBundleCreateRequest) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<AssetBundle> GetAwaiter(this AssetBundleCreateRequest instruction) Parameters Type Name Description AssetBundleCreateRequest instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < AssetBundle > GetAwaiter(AssetBundleRequest) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<Object> GetAwaiter(this AssetBundleRequest instruction) Parameters Type Name Description AssetBundleRequest instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < Object > GetAwaiter(AsyncOperation) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<AsyncOperation> GetAwaiter(this AsyncOperation instruction) Parameters Type Name Description AsyncOperation instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < AsyncOperation > GetAwaiter(WaitForUpdate) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForUpdate instruction) Parameters Type Name Description WaitForUpdate instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(ResourceRequest) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<Object> GetAwaiter(this ResourceRequest instruction) Parameters Type Name Description ResourceRequest instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < Object > GetAwaiter(IEnumerator) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<object> GetAwaiter(this IEnumerator coroutine) Parameters Type Name Description IEnumerator coroutine Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < Object > GetAwaiter(WaitForEndOfFrame) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForEndOfFrame instruction) Parameters Type Name Description WaitForEndOfFrame instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitForFixedUpdate) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForFixedUpdate instruction) Parameters Type Name Description WaitForFixedUpdate instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitForSeconds) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForSeconds instruction) Parameters Type Name Description WaitForSeconds instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitForSecondsRealtime) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForSecondsRealtime instruction) Parameters Type Name Description WaitForSecondsRealtime instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitUntil) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitUntil instruction) Parameters Type Name Description WaitUntil instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitWhile) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitWhile instruction) Parameters Type Name Description WaitWhile instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter<T>(IEnumerator<T>) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<T> GetAwaiter<T>(this IEnumerator<T> coroutine) Parameters Type Name Description IEnumerator <T> coroutine Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter <T> Type Parameters Name Description T"
  },
  "api/i5.Toolkit.Core.Utilities.Async.AwaiterExtensions.SimpleCoroutineAwaiter.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Async.AwaiterExtensions.SimpleCoroutineAwaiter.html",
    "title": "Class AwaiterExtensions.SimpleCoroutineAwaiter | i5 Toolkit Documentation",
    "keywords": "Class AwaiterExtensions.SimpleCoroutineAwaiter Processes Coroutine and notifies completion. Inheritance Object AwaiterExtensions.SimpleCoroutineAwaiter Namespace : i5.Toolkit.Core.Utilities.Async Assembly : cs.temp.dll.dll Syntax public class SimpleCoroutineAwaiter : INotifyCompletion Properties IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description Boolean Methods Complete(Exception) Declaration public void Complete(Exception e) Parameters Type Name Description Exception e GetResult() Declaration public void GetResult()"
  },
  "api/i5.Toolkit.Core.Utilities.Async.AwaiterExtensions.SimpleCoroutineAwaiter-1.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Async.AwaiterExtensions.SimpleCoroutineAwaiter-1.html",
    "title": "Class AwaiterExtensions.SimpleCoroutineAwaiter<T> | i5 Toolkit Documentation",
    "keywords": "Class AwaiterExtensions.SimpleCoroutineAwaiter<T> Processes Coroutine and notifies completion with result. Inheritance Object AwaiterExtensions.SimpleCoroutineAwaiter<T> Namespace : i5.Toolkit.Core.Utilities.Async Assembly : cs.temp.dll.dll Syntax public class SimpleCoroutineAwaiter<T> : INotifyCompletion Type Parameters Name Description T The result type. Properties IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description Boolean Methods Complete(T, Exception) Declaration public void Complete(T taskResult, Exception e) Parameters Type Name Description T taskResult Exception e GetResult() Declaration public T GetResult() Returns Type Description T"
  },
  "api/i5.Toolkit.Core.Utilities.Async.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Async.html",
    "title": "Namespace i5.Toolkit.Core.Utilities.Async | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Utilities.Async Classes AwaiterExtensions We could just add a generic GetAwaiter to YieldInstruction and CustomYieldInstruction but instead we add specific methods to each derived class to allow for return values that make the most sense for the specific instruction type. AwaiterExtensions.SimpleCoroutineAwaiter Processes Coroutine and notifies completion. AwaiterExtensions.SimpleCoroutineAwaiter<T> Processes Coroutine and notifies completion with result. SyncContextUtility Utility class to assist in thread and context synchronization. WaitForBackgroundThread WaitForUpdate This can be used as a way to return to the main unity thread when using multiple threads with async methods."
  },
  "api/i5.Toolkit.Core.Utilities.Async.SyncContextUtility.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Async.SyncContextUtility.html",
    "title": "Class SyncContextUtility | i5 Toolkit Documentation",
    "keywords": "Class SyncContextUtility Utility class to assist in thread and context synchronization. Inheritance Object SyncContextUtility Namespace : i5.Toolkit.Core.Utilities.Async Assembly : cs.temp.dll.dll Syntax public static class SyncContextUtility Properties IsMainThread Is this being called from the main thread? Declaration public static bool IsMainThread { get; } Property Value Type Description Boolean UnitySynchronizationContext This Unity Player's Synchronization Context. Declaration public static SynchronizationContext UnitySynchronizationContext { get; } Property Value Type Description SynchronizationContext UnityThreadId This Unity Player's Thread Id. Declaration public static int UnityThreadId { get; } Property Value Type Description Int32"
  },
  "api/i5.Toolkit.Core.Utilities.Async.WaitForBackgroundThread.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Async.WaitForBackgroundThread.html",
    "title": "Class WaitForBackgroundThread | i5 Toolkit Documentation",
    "keywords": "Class WaitForBackgroundThread Inheritance Object WaitForBackgroundThread Namespace : i5.Toolkit.Core.Utilities.Async Assembly : cs.temp.dll.dll Syntax public class WaitForBackgroundThread Methods GetAwaiter() Declaration public ConfiguredTaskAwaitable.ConfiguredTaskAwaiter GetAwaiter() Returns Type Description ConfiguredTaskAwaitable.ConfiguredTaskAwaiter"
  },
  "api/i5.Toolkit.Core.Utilities.Async.WaitForUpdate.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Async.WaitForUpdate.html",
    "title": "Class WaitForUpdate | i5 Toolkit Documentation",
    "keywords": "Class WaitForUpdate This can be used as a way to return to the main unity thread when using multiple threads with async methods. Inheritance Object WaitForUpdate Namespace : i5.Toolkit.Core.Utilities.Async Assembly : cs.temp.dll.dll Syntax public class WaitForUpdate : CustomYieldInstruction Properties keepWaiting Declaration public override bool keepWaiting { get; } Property Value Type Description Boolean"
  },
  "api/i5.Toolkit.Core.Utilities.Browser.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Browser.html",
    "title": "Class Browser | i5 Toolkit Documentation",
    "keywords": "Class Browser Implementation that opens the system's default browser Inheritance Object Browser Implements IBrowser Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public class Browser : IBrowser Methods OpenURL(String) Opens the provided URL in the system's default browser Declaration public void OpenURL(string url) Parameters Type Name Description String url The url to open Implements IBrowser"
  },
  "api/i5.Toolkit.Core.Utilities.ComponentUtilities.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ComponentUtilities.html",
    "title": "Class ComponentUtilities | i5 Toolkit Documentation",
    "keywords": "Class ComponentUtilities Utility functions regarding MonoBehaviour components Inheritance Object ComponentUtilities Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class ComponentUtilities Methods EnsureComponentReference<T>(GameObject, ref T, Boolean) Makes sure that the given component reference is set to a component if the reference is not yet set Declaration public static void EnsureComponentReference<T>(GameObject gameObject, ref T componentReference, bool addComponent) where T : Component Parameters Type Name Description GameObject gameObject The gameobject which contains the component T componentReference The reference to the component Boolean addComponent If true, the component will be added if it does not exist; otherwise the componentReference may still be null after this call if the component does not exist Type Parameters Name Description T The type of component to search for GetOrAddComponent<T>(GameObject) Tries to get the reference to a component and adds the component if it does not exist Declaration public static T GetOrAddComponent<T>(GameObject gameObject) where T : Component Parameters Type Name Description GameObject gameObject The gameobject on which the component should be searched or added Returns Type Description T The reference to the component which already existed or was just created Type Parameters Name Description T The type of component to search for"
  },
  "api/i5.Toolkit.Core.Utilities.ConstantRotation.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ConstantRotation.html",
    "title": "Class ConstantRotation | i5 Toolkit Documentation",
    "keywords": "Class ConstantRotation Scripts that applies a contant rotation around the Y axis to an object Inheritance Object ConstantRotation Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public class ConstantRotation : MonoBehaviour Fields speed The speed at which the object should rotate Declaration public float speed Field Value Type Description Single"
  },
  "api/i5.Toolkit.Core.Utilities.ContentLoaders.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ContentLoaders.html",
    "title": "Namespace i5.Toolkit.Core.Utilities.ContentLoaders | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Utilities.ContentLoaders Classes UnityTextureLoader Wrapper class which loads textures using Unity's WebRequestsTexture UnityWebRequestLoader Content loader that uses UnityWebRequests to fech data from the Web Interfaces IContentLoader<T> /// Interface for modules which load content from the Web"
  },
  "api/i5.Toolkit.Core.Utilities.ContentLoaders.IContentLoader-1.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ContentLoaders.IContentLoader-1.html",
    "title": "Interface IContentLoader<T> | i5 Toolkit Documentation",
    "keywords": "Interface IContentLoader<T> /// Interface for modules which load content from the Web Namespace : i5.Toolkit.Core.Utilities.ContentLoaders Assembly : cs.temp.dll.dll Syntax public interface IContentLoader<T> Type Parameters Name Description T The result's payload Methods LoadAsync(String) Loads a resource from the given URI Should be used asynchronously Declaration Task<WebResponse<T>> LoadAsync(string uri) Parameters Type Name Description String uri The uri where the string resource is stored Returns Type Description Task < WebResponse <T>> The fetched resource"
  },
  "api/i5.Toolkit.Core.Utilities.ContentLoaders.UnityTextureLoader.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ContentLoaders.UnityTextureLoader.html",
    "title": "Class UnityTextureLoader | i5 Toolkit Documentation",
    "keywords": "Class UnityTextureLoader Wrapper class which loads textures using Unity's WebRequestsTexture Inheritance Object UnityTextureLoader Implements IContentLoader < Texture2D > Namespace : i5.Toolkit.Core.Utilities.ContentLoaders Assembly : cs.temp.dll.dll Syntax public class UnityTextureLoader : IContentLoader<Texture2D> Methods LoadAsync(String) Loads the texture at the given URI using Unity's built-in methods Declaration public Task<WebResponse<Texture2D>> LoadAsync(string uri) Parameters Type Name Description String uri The uri where the texture is stored Returns Type Description Task < WebResponse < Texture2D >> Returns a WebResponse with the results of the web request Implements IContentLoader<T>"
  },
  "api/i5.Toolkit.Core.Utilities.ContentLoaders.UnityWebRequestLoader.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ContentLoaders.UnityWebRequestLoader.html",
    "title": "Class UnityWebRequestLoader | i5 Toolkit Documentation",
    "keywords": "Class UnityWebRequestLoader Content loader that uses UnityWebRequests to fech data from the Web Inheritance Object UnityWebRequestLoader Implements IContentLoader < String > Namespace : i5.Toolkit.Core.Utilities.ContentLoaders Assembly : cs.temp.dll.dll Syntax public class UnityWebRequestLoader : IContentLoader<string> Methods LoadAsync(String) Loads content from the given URI Declaration public Task<WebResponse<string>> LoadAsync(string uri) Parameters Type Name Description String uri The URI from where content should be downloaded Returns Type Description Task < WebResponse < String >> Returns the downloaded string content Implements IContentLoader<T>"
  },
  "api/i5.Toolkit.Core.Utilities.ConversionUtils.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ConversionUtils.html",
    "title": "Class ConversionUtils | i5 Toolkit Documentation",
    "keywords": "Class ConversionUtils Extensions for converting data formats to each other Inheritance Object ConversionUtils Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class ConversionUtils Methods ToColor(Vector3) Converts a Vector3 to a Color Maps the x-value to the red channel, the y-value to the green channel and the z-value to the blue channel Declaration public static Color ToColor(this Vector3 vector) Parameters Type Name Description Vector3 vector The Vector3 which should be converted Returns Type Description Color Returns a color which has the same rgb values as the vector has xyz values ToColor(Vector4) Converts a Vector4 to a Color Maps the x-value to the red channel, the y-value to the green channel, the z-value to the blue channel and the w-value to the alpha channel Declaration public static Color ToColor(this Vector4 vector) Parameters Type Name Description Vector4 vector The Vector4 which should be converted Returns Type Description Color Returns a color which has the same rgba values as the vector has xyzw values ToVector3(Color) Converts a Color to a Vector3 Maps the red channel to the x value, the green channel to the y value and the blue channel to the z value Declaration public static Vector3 ToVector3(this Color color) Parameters Type Name Description Color color The color to convert Returns Type Description Vector3 Returns a Vector3 which has the same xyz values as the color has rgb values ToVector4(Color) Converts a Color to a Vector4 Maps the red channel to the x value, the green channel to the y value, the blue channel to the z value and the alpha channel to the w value Declaration public static Vector4 ToVector4(this Color color) Parameters Type Name Description Color color The color to convert Returns Type Description Vector4 Returns a Vector4 which has the same xyzw values as the color has rgba values"
  },
  "api/i5.Toolkit.Core.Utilities.Exceptions.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Exceptions.html",
    "title": "Namespace i5.Toolkit.Core.Utilities.Exceptions | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Utilities.Exceptions Classes PlatformNotSupportedException"
  },
  "api/i5.Toolkit.Core.Utilities.Exceptions.PlatformNotSupportedException.html": {
    "href": "api/i5.Toolkit.Core.Utilities.Exceptions.PlatformNotSupportedException.html",
    "title": "Class PlatformNotSupportedException | i5 Toolkit Documentation",
    "keywords": "Class PlatformNotSupportedException Inheritance Object PlatformNotSupportedException Namespace : i5.Toolkit.Core.Utilities.Exceptions Assembly : cs.temp.dll.dll Syntax public class PlatformNotSupportedException : Exception Constructors PlatformNotSupportedException() Declaration public PlatformNotSupportedException() PlatformNotSupportedException(String) Declaration public PlatformNotSupportedException(string message) Parameters Type Name Description String message PlatformNotSupportedException(String, Exception) Declaration public PlatformNotSupportedException(string message, Exception inner) Parameters Type Name Description String message Exception inner"
  },
  "api/i5.Toolkit.Core.Utilities.html": {
    "href": "api/i5.Toolkit.Core.Utilities.html",
    "title": "Namespace i5.Toolkit.Core.Utilities | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Utilities Classes Browser Implementation that opens the system's default browser ComponentUtilities Utility functions regarding MonoBehaviour components ConstantRotation Scripts that applies a contant rotation around the Y axis to an object ConversionUtils Extensions for converting data formats to each other i5Debug Logger class for writing messages to the console JsonArrayUtility Helper script for serializing and de-serializing Json Arrays Unity's built in Json Serializer is not able to handle JSON data which have an unnamed array at root level JsonUtilityWrapper NameValueCollectionExtensions ObjectPool<T> Object pool which can store instances so that they can be reused This is useful for objects like GameObjects or Meshes where the creation and destruction drops the performance This should definitely be used for meshes since they are not automatically cleaned up by the garbage collector ParserUtils Parser utils for parsing vectors from strings PersistenceScene SpecialDebugMessages UnityWebRequestRestConnector UriUtils Utility functions for operating on Uris WebResponse<T> Container object which is produced by IContentLoader classes after they fetched content from the Web Interfaces IBrowser Contract which defines the capabilities of a browser IJsonSerializer Contract which defines the capabilities of a JSON serializer IRestConnector"
  },
  "api/i5.Toolkit.Core.Utilities.i5Debug.html": {
    "href": "api/i5.Toolkit.Core.Utilities.i5Debug.html",
    "title": "Class i5Debug | i5 Toolkit Documentation",
    "keywords": "Class i5Debug Logger class for writing messages to the console Inheritance Object i5Debug Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class i5Debug Methods Log(Object, MonoBehaviour) Logs a formatted message to the Unity console Declaration public static void Log(object message, MonoBehaviour sender) Parameters Type Name Description Object message The message to log MonoBehaviour sender The sender of the message Log(Object, Object) Logs a formatted message to the Unity console Declaration public static void Log(object message, object sender) Parameters Type Name Description Object message The message to log Object sender The sender of the message LogError(Object, MonoBehaviour) Logs a formatted error message to the Unity console Declaration public static void LogError(object message, MonoBehaviour sender) Parameters Type Name Description Object message The message to log MonoBehaviour sender The sender of the message LogError(Object, Object) Logs a formatted error message to the Unity console Declaration public static void LogError(object message, object sender) Parameters Type Name Description Object message The message to log Object sender The sender of the message LogWarning(Object, MonoBehaviour) Logs a formatted warning message to the Unity console Declaration public static void LogWarning(object message, MonoBehaviour sender) Parameters Type Name Description Object message The message to log MonoBehaviour sender The sender of the message LogWarning(Object, Object) Logs a formatted warning message to the Unity console Declaration public static void LogWarning(object message, object sender) Parameters Type Name Description Object message The message to log Object sender The sender of the message"
  },
  "api/i5.Toolkit.Core.Utilities.IBrowser.html": {
    "href": "api/i5.Toolkit.Core.Utilities.IBrowser.html",
    "title": "Interface IBrowser | i5 Toolkit Documentation",
    "keywords": "Interface IBrowser Contract which defines the capabilities of a browser Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public interface IBrowser Methods OpenURL(String) Opens the given URL in a browser Declaration void OpenURL(string url) Parameters Type Name Description String url The URL to open"
  },
  "api/i5.Toolkit.Core.Utilities.IJsonSerializer.html": {
    "href": "api/i5.Toolkit.Core.Utilities.IJsonSerializer.html",
    "title": "Interface IJsonSerializer | i5 Toolkit Documentation",
    "keywords": "Interface IJsonSerializer Contract which defines the capabilities of a JSON serializer Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public interface IJsonSerializer Methods FromJson<T>(String) Deserializes an object from the given JSON string Declaration T FromJson<T>(string json) Parameters Type Name Description String json The json string with the data Returns Type Description T Returns the deserialized type object Type Parameters Name Description T The type which should be deserialized ToJson(Object, Boolean) Serializes a given object to a JSON string Declaration string ToJson(object obj, bool prettyPrint = false) Parameters Type Name Description Object obj The object which should be serialized Boolean prettyPrint If set to true, the JSON output will be formatted to a more easily readable form Returns Type Description String Returns the serialized JSON string based on the object's values"
  },
  "api/i5.Toolkit.Core.Utilities.IRestConnector.html": {
    "href": "api/i5.Toolkit.Core.Utilities.IRestConnector.html",
    "title": "Interface IRestConnector | i5 Toolkit Documentation",
    "keywords": "Interface IRestConnector Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public interface IRestConnector Methods DeleteAsync(String) Declaration Task<WebResponse<string>> DeleteAsync(string uri) Parameters Type Name Description String uri Returns Type Description Task < WebResponse < String >> GetAsync(String) Declaration Task<WebResponse<string>> GetAsync(string uri) Parameters Type Name Description String uri Returns Type Description Task < WebResponse < String >> PostAsync(String, String) Declaration Task<WebResponse<string>> PostAsync(string uri, string postData) Parameters Type Name Description String uri String postData Returns Type Description Task < WebResponse < String >> PutAsync(String, String) Declaration Task<WebResponse<string>> PutAsync(string uri, string postData) Parameters Type Name Description String uri String postData Returns Type Description Task < WebResponse < String >>"
  },
  "api/i5.Toolkit.Core.Utilities.JsonArrayUtility.html": {
    "href": "api/i5.Toolkit.Core.Utilities.JsonArrayUtility.html",
    "title": "Class JsonArrayUtility | i5 Toolkit Documentation",
    "keywords": "Class JsonArrayUtility Helper script for serializing and de-serializing Json Arrays Unity's built in Json Serializer is not able to handle JSON data which have an unnamed array at root level Inheritance Object JsonArrayUtility Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class JsonArrayUtility Methods EncapsulateInWrapper(String) Helper function to encapsulate a json string which has an unnamed json array at root level in such a way that it can be converted using FromJson() Declaration public static string EncapsulateInWrapper(string json) Parameters Type Name Description String json The original json string Returns Type Description String The encapsulated json string which is now ready for json array de-serialization FromJson<T>(String) Converts a string to an array of the provided type Declaration public static T[] FromJson<T>(string json) Parameters Type Name Description String json The json string Returns Type Description T[] Converted array of type T Type Parameters Name Description T The array type to convert to ToJson<T>(T[]) Converts an array of type T to a json string Declaration public static string ToJson<T>(T[] array) Parameters Type Name Description T[] array Array to convert to json data Returns Type Description String JSON string Type Parameters Name Description T The type of the array ToJson<T>(T[], Boolean) Converts an array of type T to a json string Declaration public static string ToJson<T>(T[] array, bool prettyPrint) Parameters Type Name Description T[] array Array to conver to json data Boolean prettyPrint If true, the output will be printed in a way that is more human-readable Returns Type Description String Json string Type Parameters Name Description T The type of the array"
  },
  "api/i5.Toolkit.Core.Utilities.JsonUtilityWrapper.html": {
    "href": "api/i5.Toolkit.Core.Utilities.JsonUtilityWrapper.html",
    "title": "Class JsonUtilityWrapper | i5 Toolkit Documentation",
    "keywords": "Class JsonUtilityWrapper Inheritance Object JsonUtilityWrapper Implements IJsonSerializer Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public class JsonUtilityWrapper : IJsonSerializer Methods FromJson<T>(String) Declaration public T FromJson<T>(string json) Parameters Type Name Description String json Returns Type Description T Type Parameters Name Description T ToJson(Object, Boolean) Declaration public string ToJson(object obj, bool prettyPrint = false) Parameters Type Name Description Object obj Boolean prettyPrint Returns Type Description String Implements IJsonSerializer"
  },
  "api/i5.Toolkit.Core.Utilities.NameValueCollectionExtensions.html": {
    "href": "api/i5.Toolkit.Core.Utilities.NameValueCollectionExtensions.html",
    "title": "Class NameValueCollectionExtensions | i5 Toolkit Documentation",
    "keywords": "Class NameValueCollectionExtensions Inheritance Object NameValueCollectionExtensions Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class NameValueCollectionExtensions Methods ToDictionary(NameValueCollection) Declaration public static Dictionary<string, string> ToDictionary(this NameValueCollection collection) Parameters Type Name Description NameValueCollection collection Returns Type Description Dictionary < String , String >"
  },
  "api/i5.Toolkit.Core.Utilities.ObjectPool-1.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ObjectPool-1.html",
    "title": "Class ObjectPool<T> | i5 Toolkit Documentation",
    "keywords": "Class ObjectPool<T> Object pool which can store instances so that they can be reused This is useful for objects like GameObjects or Meshes where the creation and destruction drops the performance This should definitely be used for meshes since they are not automatically cleaned up by the garbage collector Inheritance Object ObjectPool<T> Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class ObjectPool<T> Type Parameters Name Description T The object type which should be stored in the pool Methods ClearPool(Action<T>) Clears the default pool by removing every instance in the queue Performs the given destroyAction on each instance to destroy it You probably want to use Destroy() inside the destroyAction Declaration public static void ClearPool(Action<T> destroyAction = null) Parameters Type Name Description Action <T> destroyAction ClearPool(Int32, Action<T>) Clears the pool by removing every instance in the queue Performs the given destroyAction on each instance to destroy it You probably want to use Destroy() inside the destroyAction Declaration public static void ClearPool(int poolId, Action<T> destroyAction = null) Parameters Type Name Description Int32 poolId The id of the pool which should be cleared Action <T> destroyAction The action which should be performed to destroy on object CreateNewPool() Opens a new pool and returns the id of the pool Declaration public static int CreateNewPool() Returns Type Description Int32 The id of the created pool CreateNewPool(Int32) Opens a new pool and returns the id of the pool Declaration public static int CreateNewPool(int capacity) Parameters Type Name Description Int32 capacity Define a (soft) capacity of the pool for which memory is allocated in advance Returns Type Description Int32 The id of the created pool ReleaseResource(T) Returns the resource to the default pool so that it can be requested again This should return all control over this object back to the pool Declaration public static void ReleaseResource(T resource) Parameters Type Name Description T resource The resource which is returned to the pool ReleaseResource(Int32, T) Returns the resource to the pool so that it can be requested again This should return all control over this object back to the pool Declaration public static void ReleaseResource(int poolId, T resource) Parameters Type Name Description Int32 poolId The id of the pool T resource The resource which is returned to the pool RemovePool(Int32, Action<T>) First cleans and then removes the pool with the given id Declaration public static void RemovePool(int poolId, Action<T> destroyAction = null) Parameters Type Name Description Int32 poolId Action <T> destroyAction RequestResource(Func<T>) Requests a resource from the default pool If no resource is left, the code in the creationFactory function will be executed to create a new object The creationFactory should probably use Unity's Instantiate method Declaration public static T RequestResource(Func<T> creationFactory) Parameters Type Name Description Func <T> creationFactory Function which should create a new instance of the pooled object Returns Type Description T An instance of the object from the pool RequestResource(Int32, Func<T>) Requests a resource from the pool If no resource is left, the code in the creationFactory function will be executed to create a new object The creationFactory should probably use Unity's Instantiate method Declaration public static T RequestResource(int poolId, Func<T> creationFactory) Parameters Type Name Description Int32 poolId Func <T> creationFactory Function which should create a new instance of the pooled object Returns Type Description T An instance of the object from the pool"
  },
  "api/i5.Toolkit.Core.Utilities.ParserUtils.html": {
    "href": "api/i5.Toolkit.Core.Utilities.ParserUtils.html",
    "title": "Class ParserUtils | i5 Toolkit Documentation",
    "keywords": "Class ParserUtils Parser utils for parsing vectors from strings Inheritance Object ParserUtils Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class ParserUtils Methods TryParseSpaceSeparatedVector2(String, out Vector2) Tries to convert a space separated string to a Vector2 Declaration public static bool TryParseSpaceSeparatedVector2(string input, out Vector2 result) Parameters Type Name Description String input The string which should be converted Vector2 result The result of the conversion; if the conversion failed, it has the default value Returns Type Description Boolean Returns true if the conversion was successful TryParseSpaceSeparatedVector3(String, out Vector3) Tries to parse a string with three space-separated coordinates, e.g. \"1.2 -5.3 1.0\" Declaration public static bool TryParseSpaceSeparatedVector3(string input, out Vector3 result) Parameters Type Name Description String input The string which should be converted to a Vector3 Vector3 result The result of the conversion; if the conversion failed, it has the default value Returns Type Description Boolean Returns true if the string could be parsed, otherwise false TryParseStringArrayToVector2(String[], out Vector2) Parses an array of strings to Vector2 The array must have exactly two entries so that the conversion succeeds Declaration public static bool TryParseStringArrayToVector2(string[] strValues, out Vector2 result) Parameters Type Name Description String [] strValues The string array which should be parsed to a Vector2 Vector2 result The result of the conversion; if the conversion failed, it has the default value Returns Type Description Boolean Returns true if parsing was successful TryParseStringArrayToVector3(String[], out Vector3) Tries to parse a string array to a Vector3 The array must have exactly three entries so that the conversion succeeds Declaration public static bool TryParseStringArrayToVector3(string[] strValues, out Vector3 result) Parameters Type Name Description String [] strValues The string array to parse Vector3 result The result of the conversion; if the conversion failed, it has the default value Returns Type Description Boolean Returns true if the string array could be parsed, otherwise false TryParseStringArrayToVector4(String[], out Vector4) Tries to parse a string array to a Vector3 The array must have exactly four entries so that the conversion succeeds Declaration public static bool TryParseStringArrayToVector4(string[] strValues, out Vector4 result) Parameters Type Name Description String [] strValues The string array to parse Vector4 result The result of the conversion; if the conversion failed, it has the default value Returns Type Description Boolean Returns true if the string array could be parsed, otherwise false"
  },
  "api/i5.Toolkit.Core.Utilities.PersistenceScene.html": {
    "href": "api/i5.Toolkit.Core.Utilities.PersistenceScene.html",
    "title": "Class PersistenceScene | i5 Toolkit Documentation",
    "keywords": "Class PersistenceScene Inheritance Object PersistenceScene Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class PersistenceScene Methods GetPersistentScene() Gets or creates the persistent scene if it does not exist In the editor, this will always return the active scene since you should not create new scenes in the editor Declaration public static Scene GetPersistentScene() Returns Type Description Scene Returns the persistent scene MarkPersistent(GameObject) Moves the provided GameObject to the persistent scene If this is executed in an editor build, this has no effect Declaration public static void MarkPersistent(GameObject gameObject) Parameters Type Name Description GameObject gameObject GameObject which should be made persistent UnmarkPersistent(GameObject) Makes an object not persist anymore by moving it to the active scene Declaration public static void UnmarkPersistent(GameObject gameObject) Parameters Type Name Description GameObject gameObject The GameObject which should not be persistent anymore"
  },
  "api/i5.Toolkit.Core.Utilities.SpecialDebugMessages.html": {
    "href": "api/i5.Toolkit.Core.Utilities.SpecialDebugMessages.html",
    "title": "Class SpecialDebugMessages | i5 Toolkit Documentation",
    "keywords": "Class SpecialDebugMessages Inheritance Object SpecialDebugMessages Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class SpecialDebugMessages Methods LogArrayInitializedWithSize0Warning(MonoBehaviour, String) Declaration public static void LogArrayInitializedWithSize0Warning(MonoBehaviour thisComponent, string arrayName) Parameters Type Name Description MonoBehaviour thisComponent String arrayName LogArrayMissingReferenceError(MonoBehaviour, String, Int32) Declaration public static void LogArrayMissingReferenceError(MonoBehaviour thisComponent, string arrayName, int index) Parameters Type Name Description MonoBehaviour thisComponent String arrayName Int32 index LogComponentNotFoundError(MonoBehaviour, String, GameObject) Declaration public static void LogComponentNotFoundError(MonoBehaviour thisComponent, string searchedComponent, GameObject target) Parameters Type Name Description MonoBehaviour thisComponent String searchedComponent GameObject target LogMissingReferenceError(MonoBehaviour, String) Declaration public static void LogMissingReferenceError(MonoBehaviour thisComponent, string referenceName) Parameters Type Name Description MonoBehaviour thisComponent String referenceName"
  },
  "api/i5.Toolkit.Core.Utilities.UnityAdapters.GameObjectAdapter.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UnityAdapters.GameObjectAdapter.html",
    "title": "Class GameObjectAdapter | i5 Toolkit Documentation",
    "keywords": "Class GameObjectAdapter Inheritance Object GameObjectAdapter Implements IActivateable Namespace : i5.Toolkit.Core.Utilities.UnityAdapters Assembly : cs.temp.dll.dll Syntax public class GameObjectAdapter : IActivateable Constructors GameObjectAdapter(GameObject) Declaration public GameObjectAdapter(GameObject adaptee) Parameters Type Name Description GameObject adaptee Properties ActiveInHierarchy Declaration public bool ActiveInHierarchy { get; set; } Property Value Type Description Boolean ActiveSelf Declaration public bool ActiveSelf { get; set; } Property Value Type Description Boolean Adaptee Declaration public GameObject Adaptee { get; } Property Value Type Description GameObject Implements IActivateable"
  },
  "api/i5.Toolkit.Core.Utilities.UnityAdapters.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UnityAdapters.html",
    "title": "Namespace i5.Toolkit.Core.Utilities.UnityAdapters | i5 Toolkit Documentation",
    "keywords": "Namespace i5.Toolkit.Core.Utilities.UnityAdapters Classes GameObjectAdapter RectTransformAdapter ScrollRectAdapter TextMeshProTextAdapter TextMeshProUGUITextAdapter TextMeshTextAdapter Interfaces IActivateable IRectangle IScrollView ITextDisplay"
  },
  "api/i5.Toolkit.Core.Utilities.UnityAdapters.IActivateable.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UnityAdapters.IActivateable.html",
    "title": "Interface IActivateable | i5 Toolkit Documentation",
    "keywords": "Interface IActivateable Namespace : i5.Toolkit.Core.Utilities.UnityAdapters Assembly : cs.temp.dll.dll Syntax public interface IActivateable Properties ActiveSelf Declaration bool ActiveSelf { get; set; } Property Value Type Description Boolean"
  },
  "api/i5.Toolkit.Core.Utilities.UnityAdapters.IRectangle.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UnityAdapters.IRectangle.html",
    "title": "Interface IRectangle | i5 Toolkit Documentation",
    "keywords": "Interface IRectangle Namespace : i5.Toolkit.Core.Utilities.UnityAdapters Assembly : cs.temp.dll.dll Syntax public interface IRectangle Properties Size Declaration Vector2 Size { get; set; } Property Value Type Description Vector2"
  },
  "api/i5.Toolkit.Core.Utilities.UnityAdapters.IScrollView.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UnityAdapters.IScrollView.html",
    "title": "Interface IScrollView | i5 Toolkit Documentation",
    "keywords": "Interface IScrollView Namespace : i5.Toolkit.Core.Utilities.UnityAdapters Assembly : cs.temp.dll.dll Syntax public interface IScrollView Properties NormalizedPosition Declaration Vector2 NormalizedPosition { get; set; } Property Value Type Description Vector2"
  },
  "api/i5.Toolkit.Core.Utilities.UnityAdapters.ITextDisplay.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UnityAdapters.ITextDisplay.html",
    "title": "Interface ITextDisplay | i5 Toolkit Documentation",
    "keywords": "Interface ITextDisplay Namespace : i5.Toolkit.Core.Utilities.UnityAdapters Assembly : cs.temp.dll.dll Syntax public interface ITextDisplay Properties Text Declaration string Text { get; set; } Property Value Type Description String"
  },
  "api/i5.Toolkit.Core.Utilities.UnityAdapters.RectTransformAdapter.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UnityAdapters.RectTransformAdapter.html",
    "title": "Class RectTransformAdapter | i5 Toolkit Documentation",
    "keywords": "Class RectTransformAdapter Inheritance Object RectTransformAdapter Implements IRectangle Namespace : i5.Toolkit.Core.Utilities.UnityAdapters Assembly : cs.temp.dll.dll Syntax public class RectTransformAdapter : IRectangle Constructors RectTransformAdapter(RectTransform) Declaration public RectTransformAdapter(RectTransform adaptee) Parameters Type Name Description RectTransform adaptee Properties Adaptee Declaration public RectTransform Adaptee { get; } Property Value Type Description RectTransform Size Declaration public Vector2 Size { get; set; } Property Value Type Description Vector2 Implements IRectangle"
  },
  "api/i5.Toolkit.Core.Utilities.UnityAdapters.ScrollRectAdapter.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UnityAdapters.ScrollRectAdapter.html",
    "title": "Class ScrollRectAdapter | i5 Toolkit Documentation",
    "keywords": "Class ScrollRectAdapter Inheritance Object ScrollRectAdapter Implements IScrollView Namespace : i5.Toolkit.Core.Utilities.UnityAdapters Assembly : cs.temp.dll.dll Syntax public class ScrollRectAdapter : IScrollView Constructors ScrollRectAdapter(ScrollRect) Declaration public ScrollRectAdapter(ScrollRect adaptee) Parameters Type Name Description ScrollRect adaptee Properties Adaptee Declaration public ScrollRect Adaptee { get; } Property Value Type Description ScrollRect NormalizedPosition Declaration public Vector2 NormalizedPosition { get; set; } Property Value Type Description Vector2 Implements IScrollView"
  },
  "api/i5.Toolkit.Core.Utilities.UnityAdapters.TextMeshProTextAdapter.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UnityAdapters.TextMeshProTextAdapter.html",
    "title": "Class TextMeshProTextAdapter | i5 Toolkit Documentation",
    "keywords": "Class TextMeshProTextAdapter Inheritance Object TextMeshProTextAdapter Implements ITextDisplay Namespace : i5.Toolkit.Core.Utilities.UnityAdapters Assembly : cs.temp.dll.dll Syntax public class TextMeshProTextAdapter : ITextDisplay Constructors TextMeshProTextAdapter(TextMeshPro) Declaration public TextMeshProTextAdapter(TextMeshPro textMesh) Parameters Type Name Description TextMeshPro textMesh Properties Text Declaration public string Text { get; set; } Property Value Type Description String TextMesh Declaration public TextMeshPro TextMesh { get; } Property Value Type Description TextMeshPro Implements ITextDisplay"
  },
  "api/i5.Toolkit.Core.Utilities.UnityAdapters.TextMeshProUGUITextAdapter.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UnityAdapters.TextMeshProUGUITextAdapter.html",
    "title": "Class TextMeshProUGUITextAdapter | i5 Toolkit Documentation",
    "keywords": "Class TextMeshProUGUITextAdapter Inheritance Object TextMeshProUGUITextAdapter Implements ITextDisplay Namespace : i5.Toolkit.Core.Utilities.UnityAdapters Assembly : cs.temp.dll.dll Syntax public class TextMeshProUGUITextAdapter : ITextDisplay Constructors TextMeshProUGUITextAdapter(TextMeshProUGUI) Declaration public TextMeshProUGUITextAdapter(TextMeshProUGUI textMesh) Parameters Type Name Description TextMeshProUGUI textMesh Properties Text Declaration public string Text { get; set; } Property Value Type Description String TextMesh Declaration public TextMeshProUGUI TextMesh { get; } Property Value Type Description TextMeshProUGUI Implements ITextDisplay"
  },
  "api/i5.Toolkit.Core.Utilities.UnityAdapters.TextMeshTextAdapter.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UnityAdapters.TextMeshTextAdapter.html",
    "title": "Class TextMeshTextAdapter | i5 Toolkit Documentation",
    "keywords": "Class TextMeshTextAdapter Inheritance Object TextMeshTextAdapter Implements ITextDisplay Namespace : i5.Toolkit.Core.Utilities.UnityAdapters Assembly : cs.temp.dll.dll Syntax public class TextMeshTextAdapter : ITextDisplay Constructors TextMeshTextAdapter(TextMesh) Declaration public TextMeshTextAdapter(TextMesh textMesh) Parameters Type Name Description TextMesh textMesh Properties Text Declaration public string Text { get; set; } Property Value Type Description String TextMesh Declaration public TextMesh TextMesh { get; } Property Value Type Description TextMesh Implements ITextDisplay"
  },
  "api/i5.Toolkit.Core.Utilities.UnityWebRequestRestConnector.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UnityWebRequestRestConnector.html",
    "title": "Class UnityWebRequestRestConnector | i5 Toolkit Documentation",
    "keywords": "Class UnityWebRequestRestConnector Inheritance Object UnityWebRequestRestConnector Implements IRestConnector Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public class UnityWebRequestRestConnector : IRestConnector Methods DeleteAsync(String) Declaration public Task<WebResponse<string>> DeleteAsync(string uri) Parameters Type Name Description String uri Returns Type Description Task < WebResponse < String >> GetAsync(String) Declaration public Task<WebResponse<string>> GetAsync(string uri) Parameters Type Name Description String uri Returns Type Description Task < WebResponse < String >> PostAsync(String, String) Declaration public Task<WebResponse<string>> PostAsync(string uri, string postData) Parameters Type Name Description String uri String postData Returns Type Description Task < WebResponse < String >> PutAsync(String, String) Declaration public Task<WebResponse<string>> PutAsync(string uri, string postData) Parameters Type Name Description String uri String postData Returns Type Description Task < WebResponse < String >> Implements IRestConnector"
  },
  "api/i5.Toolkit.Core.Utilities.UriUtils.html": {
    "href": "api/i5.Toolkit.Core.Utilities.UriUtils.html",
    "title": "Class UriUtils | i5 Toolkit Documentation",
    "keywords": "Class UriUtils Utility functions for operating on Uris Inheritance Object UriUtils Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public class UriUtils Methods DictionaryToParameterString<T>(Dictionary<String, T>) Declaration public static string DictionaryToParameterString<T>(Dictionary<string, T> dictionary) Parameters Type Name Description Dictionary < String , T> dictionary Returns Type Description String Type Parameters Name Description T GetUriFragments(Uri) Declaration public static Dictionary<string, string> GetUriFragments(Uri uri) Parameters Type Name Description Uri uri Returns Type Description Dictionary < String , String > GetUriParameters(Uri) Extracts the parameters of a given uri and returns them Declaration public static Dictionary<string, string> GetUriParameters(Uri uri) Parameters Type Name Description Uri uri The uri which contains the parameters Returns Type Description Dictionary < String , String > Returns the parameters of the uri RewriteFileUriPath(Uri, String) Rewrites a given URI that points to a file so that it points to the location specified by the relative file path The relative file path starts at the uri's destination Declaration public static string RewriteFileUriPath(Uri uri, string relativeFilePath) Parameters Type Name Description Uri uri The uri which should be rewritten String relativeFilePath A relative file path starting at uri's location Returns Type Description String Returns an absolute Uri which points to the location of the relative file path WordArrayToSpaceEscapedString(String[]) Declaration public static string WordArrayToSpaceEscapedString(string[] array) Parameters Type Name Description String [] array Returns Type Description String"
  },
  "api/i5.Toolkit.Core.Utilities.WebResponse-1.html": {
    "href": "api/i5.Toolkit.Core.Utilities.WebResponse-1.html",
    "title": "Class WebResponse<T> | i5 Toolkit Documentation",
    "keywords": "Class WebResponse<T> Container object which is produced by IContentLoader classes after they fetched content from the Web Inheritance Object WebResponse<T> Namespace : i5.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public class WebResponse<T> Type Parameters Name Description T The return type of the WebResponse Constructors WebResponse(T, Byte[], Int64) Creates a successul WebResponse with the given content and code Declaration public WebResponse(T content, byte[] byteData, long code) Parameters Type Name Description T content The content of the Web request's response Byte [] byteData The byte data of the response body Int64 code The response code WebResponse(Boolean, T, Byte[], Int64, String) Creates a new WebResponse object Declaration public WebResponse(bool successful, T content, byte[] byteData, long code, string errorMessage) Parameters Type Name Description Boolean successful States whether the request was successful T content Contains the content of the response Byte [] byteData Contains the byte data of the response body Int64 code The response code String errorMessage Any error messages that might have occurred WebResponse(String, Int64) Creates a failed WebResponse with the specified error message and code Declaration public WebResponse(string errorMessage, long code) Parameters Type Name Description String errorMessage The error message Int64 code The response code Properties ByteData Byte data of the Web requests response body Declaration public byte[] ByteData { get; } Property Value Type Description Byte [] Code The response code of the Web request Declaration public long Code { get; } Property Value Type Description Int64 Content Contains the content of the Web request Set to default value if the Web request failed Declaration public T Content { get; } Property Value Type Description T ErrorMessage An error message if any occurred Declaration public string ErrorMessage { get; } Property Value Type Description String Successful Set to true if the Web request was successful Declaration public bool Successful { get; } Property Value Type Description Boolean"
  },
  "index.html": {
    "href": "index.html",
    "title": "i5 Toolkit for Unity | i5 Toolkit Documentation",
    "keywords": "i5 Toolkit for Unity This toolkit contains a collection of features which can be reused in Unity projects. It is a foundation for new projects, kickstarting the development with already completed tools. Modules The i5 Toolkit provides a series of modules and features that can be used in projects. App Console Modified 3D Models Object Pool Obj Importer OpenID Connect Client Procedural Geometry Scene Documentation Service Core Spawner Setup There are different ways to add the package to a project. Alternative 1: Unity Dependency File with Git (Unity 2018.3 or later) (Recommended) The tool is available as a package for the Unity Package Manager. It can be included in new projects by referencing the git-repository on GitHub in the dependency file of the Unity project: Open your project's root folder in a file explorer. Navigate to the Packages folder and open the file manifest.json. It contains a list of package dependencies which are loaded into the project. To add a specific version of the tool to the dependencies, add the following line inside of the \"dependencies\" object and replace [version] with \"v\", followed by the release number, e.g. \"v1.2.1\". To receive the latest version, replace [version] with upm. \"com.i5.toolkit.core\": \"https://github.com/rwth-acis/i5-Toolkit-for-Unity.git#[version]\", After that, Unity will automatically download and import the package. If you specify \"upm\" to get the latest version, be aware that the package is not automatically updated. This command just pulls the latest version which is available at that time. To update to the newest current version, remove the package again and re-download it. Alternative 2: Unity Package Manager UI with Git (Unity 2019.3 or later) The package can be downloaded from a git-repository in the package manager's UI. In Unity, go to Window > Package Manger. Click on the plus-button in the top left corner of the package manager and select \"add\". Enter https://github.com/rwth-acis/i5-Toolkit-for-Unity.git#[version] into the text field where [version] is replaced with \"v\", followed by the release number, e.g. \"v1.2.1\" or upm for the latest version. Confirm the download by clicking on the \"add\" button. If you specify \"upm\" to get the latest version, be aware that the package is not automatically updated. This command just pulls the latest version which is available at that time. To update to the newest current version, remove the package again and re-download it. Alternative 3: Import custom package (Unity 2017 or later) Another option is to import the package as a .unitypackage. Download the .unitypackage-file which is supplied with the corresponding release on the releases page. With your project opened, perform a right-click on the assets browser in Unity. Select \"Import Package > Custom Packge\" from the context menu. Navigate to the path where you downloaded the .unitypackage-file, select it and confirm by clicking the \"Open\" buttom A dialog window opens where you can select which files should be imported. Select everything and click on \"Import\". Important for alternative 3: If you are updating from an earlier version, it is recommended to delete the existing \"i5 Toolkit\" folder. After that, import the new package. Example Scenes The different modules and features are presented in example scenes which can be found in the GitHub repository . You can use the example scenes as an interactive documentation, an experimentation playground and to test the features. Unit Tests The project is tested using Unit tests. Continuous integration using GitHub Actions has been set up to test and deploy new versions of the package. Related Projects For Mixed Reality development, also check out the i5 Toolkit for MR . It is an extension package that builds upon the functionality of this package and is optimized for Mixed Reality. Disclaimer This repository is not sponsored by or affiliated with Unity Technologies or its affiliates. \"Unity\" is a trademark or registered trademark of Unity Technologies or its affiliates in the U.S. and elsewhere."
  },
  "manual/App-Console.html": {
    "href": "manual/App-Console.html",
    "title": "App Console | i5 Toolkit Documentation",
    "keywords": "App Console Use Case When deploying compiled applications to devices, the application may behave slightly different to the editor simulation. For instance, erros could happen where a resource is not available on the device but is automatically available in the editor. In such cases, it is difficult to debug the problem since the application has e.g. with UWP apps been converted to C++ sources using IL2CPP. Since exceptions in Unity scripts stop the script silently, problems may not even come to attention immeditaly. Therefore, the app console of the i5 Toolkit provides a way to monitor the log outputs and error logs of scripts in the deployed application. Usage Under \"i5 Toolkit for Unity/Runtime/App Console/Prefabs\", there are pre-made consoles available. Drag-and-drop a prefab into the scene and it will automatically work. A console prefab has a console UI component (there are different variants of this component for different displays like TextMesh vs. TextMeshPro). On this console UI, a checkbox Capture In Background is available. If it is checked (default state), the console will still register logs even if it is deactivated. In its unchecked state, it will unsubscribe from the application's log feed if it is deactivated. Notes The app console is meant as a development tool for debugging purposes. It should only be used in development editions of applications and should not be included in the final application for production. The console has a noticable performance impact each time a log message is received. Therefore, reduce the log output to the necessary parts that need to be visible and avoid many logs in Update calls. Creating Own Console Prefabs To create own console prefabs, first construct the GameObjects. The main thing which is required is a text display of some sort, e.g. a TextMesh or a TextMeshPro. After that, create a UI component for the console. The UI component must inherit from ConsoleUIBehaviour . This base class provides a member consoleUI . Override the Awake() method and initialize the text console UI member. Example from the TextMeshProUGUIConsoleUI : [Tooltip(\"The text display which should show the messages\")] [SerializeField] private TextMeshProUGUI consoleTextDisplay; [Tooltip(\"The formatter configuration which defines how messages are formatted\")] [SerializeField] protected LogFormatterConfiguration logFormatterConfiguration; // initializes the text console UI protected override void Awake() { ITextDisplay textMeshProUGUIAdapter = new TextMeshProUGUITextAdapter(consoleTextDisplay); consoleUI = new TextConsoleUI(textMeshProUGUIAdapter, logFormatterConfiguration); base.Awake(); } To initialize the console UI member, you need to provide a text display. This is an adapter object that implements the ITextDisplay interface. The toolkit already provides adapter objects for the following text display components which can be used: TextMesh: TextMeshTextAdapter TextMeshPro: TextMeshProTextAdapter TextMeshProUGUI: TextMeshProUGUITextAdapter For other kinds of text displays, implement an own ITextDisplay adapter. The consoleUI can also be initialized with a log formatter configuration object. You can add additional functionality to the console UI, e.g. logic to show and hide the console or to add scrolling to the console's text. Example Scene The package's examples contain a scene with a console prefab. When executing the scene, press the the buttons F1 - F4 to generate log messages. Each key prints a different type of log message: F1: Regular log that is generated using Debug.Log F2: Warning log that is generated using Debug.LogWarning F3: Error log that is generated using Debug.LogError F4: Exception log that is generated when an exception is thrown If you press F5, you can toggle the visibility of the console."
  },
  "manual/Modified-3D-Objects.html": {
    "href": "manual/Modified-3D-Objects.html",
    "title": "Modified 3D Objects | i5 Toolkit Documentation",
    "keywords": "Modified 3D Objects Rounded Corners The rounded corners object is an extruded rectangle with rounded corners. It can be used for 3D UI elements, e.g. to create menus or buttons with rounded edges. Usage To use the rounded corners object, instantiate the prefab located under \"i5 Toolkit/Runtime/Modified 3D Objects/Prefabs/Rounded Corners.prefab\" in the scene. The prefab has a Rounded Corners component where options such as the size, depth and corner radius can be set. Property Purpose Width Specifies the width of the object Height Specifies the height of the object Depth Specifies the depth/thickness of the object Corner Radius Specifies how large the rounded corners should be. The value is relative to the edge length and should be between 0 (no rounded edges) and 0.5 (elliptic shape). Values outside of this range are automatically clamped. It is not recommended to use the exact extreme values 0 and 0.5 since they lead to overlapping vertices. Subdivisions Specifies how many vertices make up the rounded corner. Smaller values lead to a more lightweight mesh and better performance but the corners will appear jagged rounded. Higher values smooth the curvature of the corner but create denser meshes with higher performance impact. Usually, a value of 3 should be sufficient. Exact Colliders If deactivated, a box collider is used to approximate the shape of this object. If you require exact collision detection on the rounded corners, activate this setting. It will replace the box collider with a mesh collider. However, mesh colliders have a higher performance impact, so activate this option only if necessary. Do not scale the object by its transform since this will stretch the corners. Instead, use the width, height and depth settings since they preserve the circular corners. Test Scene There is a test scene where the settings of the prefab are demonstrated."
  },
  "manual/Object-Pool.html": {
    "href": "manual/Object-Pool.html",
    "title": "Object Pool | i5 Toolkit Documentation",
    "keywords": "Object Pool Purpose The problem : Usually, objects like GameObjects and Meshes are instantiated when they are needed so that they can be used in the scene. If the object is not required anymore, it is usually destroyed. Such calls of Unity's Object and Object have a performance overhead which manifests in frame drops. Destroyed objects also need to be collected by the garbage collector which intercepts the program execution and also leads to poor performance. This is especially true if many objects need to be created or destroyed at once. The solution: Object Pools A common technique to avoid such frame drops is to pool the objects. This means that a number of objects are created in advance, e.g. at application startup. At this point in time, a short loading time can be accepted since the application is most likely also loading other resources at that point. After that, the application should only pull objects from the pool to use them. Once the object is not required anymore, it is not destroyed but instead returned to the pool. Hence, objects are recycled which can decrease the amount of times that the garbage collector runs. Usage Requesting Objects You can use ObjectPools for any type of object. To request an object, e.g. a GameObject from the pool, call the following: GameObject fromPool = ObjectPool<GameObject>.RequestResource(() => {return new GameObject(\"Newly created\");}); RequestResource works in the following way: It tries to fetch an object from the pool and returns it. If the pool is empty, the method falls back to the factory method which is provided as an argument. In the example, the factory method is given as a lambda function. In general, the factory method should create a new instance of the object and return it. Returning Objects Once you do not need an object anymore, it must be returned to the pool so that other components can reuse it. For instance, to return a GameObject myGameObject , call the following method: ObjectPool<GameObject>.ReturnResource(myGameObject); Important : Before you return the object, you should reset its properties. The state in which you return the object is the state in which will receive the object again from the pool. No internal modification are performed by the pool. Moreover, it is advisable to bring objects into a storage state. For GameObjects, it makes sense to deactivate them so that they are not visible in the scene while they are unused. This also means that you have to activate the GameObject again once you retrieve it. Clearing Pools The content of object pools can be cleared using the ClearPool method. Working with Separate Sub-Pools for the Same Object Type In some cases, it makes sense to leave objects initialized in a specific state. For instance, it makes no sense to remove components from GameObjects which are already set up if the same piece of application logic retrieves the GameObject later on and re-adds the same components. Therefore, you can register sub-pools. The purpose of these sub-pools is that you can return objects in a specific state to this pool and can expect it to have this state once you request the object from this sub-pool again. As the sub-pool is separate, other components still work on the main pool and will not receive these objects which are in a different state. Registering these separate pools works in the following way: int poolId = ObjectPool<GameObject>.CreateNewPool(); This method will return an id by which the sub-pool can be addressed. By default, the main pool of an object type always has the id 0. Once you have obtained the id of the sub-pool, you can use the RequestResource and ReturnResource methods and specify the id as the first argument. GameObject fromSubPool = ObjectPool<GameObject>.RequestResource(poolId, () => {return new GameObject();}); ObjectPool<GameObject>.ReturnResource(poolId, fromSubPool); You can also remove sub-pools by calling the RemovePool method. Test Scene There is a test scenes which demonstrates the usage with meshes. The test scene was used to make sure that the pool fixes the memory leak problem that meshes introduce. If meshes are not destroyed implicitly, they are never collected by the garbage collector, meaning that creating new meshes will fill the memory over time. The ObjectPool<Mesh> pool solves this problem because the meshes can be recycled."
  },
  "manual/Obj-Importer.html": {
    "href": "manual/Obj-Importer.html",
    "title": "Obj Importer | i5 Toolkit Documentation",
    "keywords": "Obj Importer The obj importer can fetch 3D models in the .obj file format from the Web at runtime. This way, content can dynamically be loaded from a Web storage. It allows developers to maintain a list of 3D models online which can be tweaked and exchanged without updates to the deployed applications. Moreover, users can upload 3D models to the Web and so, the application can load user-specified content. The obj importer also fetches any referenced material files in the .mtl format. Moreover, associated textures in materials are also loaded. Usage Register the Service First, register the ObjImporter as a service at the ServiceManager ; ObjImporter objImporter = new ObjImporter(); ServiceManager.RegisterService(objImporter); When registering the service, it will automatically register an MtlLibrary service, too. This service is required for importing the material files and caching them so that they can be reused. Import Models Use the method ImportAsync(String) to load a 3D object from the given URL and import it as a new GameObject. The method runs asynchronously because of the Web request. Moreover, the geometry construction happens in the background on a separate thread so that there should be no noticable impact on the performance. string url = \"https://raw.githubusercontent.com/rwth-acis/i5-Toolkit-for-Unity/master/Assets/i5%20Toolkit%20for%20Unity/Samples%7E/Importers/ObjImporter/Obj%20Models/Monkey_textured.obj\" GameObject obj = await ServiceManager.GetService<ObjImporter>().ImportAsync(url); The specified URL should point directly to the .obj file. If it does not point to a file that ends with .obj, a warning is given but the import is still tried. Debugging The service provides a field ExtendedLogging . If it is set to true , the ObjImporter gives more detailed log outputs about the import process. ServiceManager.GetService<ObjImporter>().ExtendedLogging = true; Example Scene The example scene shows how to load different .obj files. In the folder \"Obj Models\", different 3D models which have been created in Blender, are stored. They can be loaded using the link to the raw object on GitHub. The 3D models vary in complexity, the number of objects, materials and textures. To find the url of an example 3D model, navigate to the model folder of the repository , select one of the .obj files and click on \"View raw\". After that, copy the url from your browser into the url field of the ServiceClient in the ObjImporter example scene. In PlayMode, press F5 to trigger the import. You can also change the url field of the ServiceManager during PlayMode and import different 3D models into one session by pressing F5 after changing the model url."
  },
  "manual/OpenID-Connect-Client.html": {
    "href": "manual/OpenID-Connect-Client.html",
    "title": "OpenID Connect Client | i5 Toolkit Documentation",
    "keywords": "OpenID Connect Client OpenID Connect OpenID Connect is a single sign-on solution for user authentication. Users can log in at a central login page that is provided by the OpenID Connect provider, e.g. Google or Learning Layers. As a result of the successful login, the application receives an access token that can be used to request protected resources or data about the logged in user. For users, OpenID Connect has the advantage that they only need one account at the OpenID Connect provider. This account can be reused in all applications that support the provider's OpenID Connect sign-in. Moreover, users do not have to trust that clients protect their login credentials and developers do not have to administer such credentials. Critical information such as the user name and password are always entered at the central login page of the OpenID Connect provider. This also means that the client never sees the user's credentials. Instead, the client only receives an access token after the login. Such an access token is only valid for a limited amount of time. Moreover, the user has to agree to scopes which list the kind information that the application is allowed to access. The user can revoke these access rights at any time. Supported Platforms The OpenID Connect client currently works on the following platforms: Unity editor (for testing) Standalone builds UWP (IL2CPP only; scripting runtime version must be set to \".NET 4.x Equivalent\") Usage Service Initialization Register a OpenIDConnectService at the ServiceManager . This can e.g. be done using a bootstrapper . When creating the service, make sure that its OidcProvider is set up. Here is an example bootstrapper: protected override void RegisterServices() { OpenIDConnectService oidc = new OpenIDConnectService(); oidc.OidcProvider = new LearningLayersOidcProvider(); // this example shows how the service can be used on an app for multiple platforms #if UNITY_WSA oidc.RedirectURI = \"i5:/\"; #else oidc.RedirectURI = \"https://www.google.com\"; #endif ServiceManager.RegisterService(oidc); } In this example, the OidcProvider is set up, e.g. using the LearningLayersOidcProvider . To set it up, a redirect page is defined. Note, that different redirect pages can be defined for different platforms. This also has the advantage that different redirect methods can be used on these platforms. In this example, Windows Store Apps use the custom URL schema \"i5:/\" whereas all other platforms redirect to Google. Switching between OpenID Connect Providers The OidcProvider is an implementation that specifies how the authentication API of a provider should be used. Currently, the toolkit has built-in support for the following OpenID Connect providers: Platform Implementation Learning Layers LearningLayersOidcProvider You can add support for further OpenID Connect providers by creating a class that implements the OidcProvider interface. The class has to define how to access the different API endpoints of the provider to retrieve information such as the access token. In the example in the previous section, we assigned the OidcProvider during the initialization phase. However, it is also possible to set this property just before calling the login function, e.g. to give the user a choice between different providers. Each OidcProvider has to be initialized with their own client credentials before using the login procedure. Adding the Client Credentials An application can only use a provider's OpenID Connect API, if you have registered a client at the API. This is a manual step that has to be done once at the beginning of the development. During the registration process, the provider will generate a client ID and a client secret. To access the API's methods, the client has to include these credentials in the requests. You can find instructions on how to register clients in the section Client Registration Protect your client data . As the name suggests, your client secret (and other client data as well) should be kept confidential. Therefore, they should be excluded if the project's source code is uploaded to public places such as GitHub. To solve this, the OpenID Connect Service can load client credentials from a separate file in the project. To define the client credentials, right-click somewhere in your Assets folder or any subfolder and choose \"Create > i5 Toolkit > OpenID Connect Client Data to create the file. If you select it, you can enter the client credentials in Unity's inspector. If you are using Git, you can now add the created file to .gitignore so that it will not be uploaded. In the setup instructions of your project, include a note that each developer has to create their own client credentials and add them to the file. Before calling the login procedure, assign the client data in the following way: // expose a field in the inspector for your client credentials [SerializeField] private ClientDataObject clientDataObject; // assign the client data ServiceManager.GetService<OpenIDConnectService>().OidcProvider.ClientData = clientDataObject.clientData; Defining the Redirect URI Before the login page is shown, a redirect URI should be specified by setting the RedirectURI property of the service. The importance of this redirect URI varies based on the target platform. Editor & Standalone Setting the redirect URI for editor and standalone builds is optional. You can do it to improve the user experience. In the editor and standalone builds, the toolkits starts an internal server to which the login automatically redirects. This way, the server always fetches the necessary data which are provided in the redirect. After that, the user is redirected to the specified URI which can e.g. point to your Web page that tells the user to return to the application. So, for editor and standalone builds, setting the RedirectURI property is optional and can be used to improve the user's experience. UWP UWP builds require a redirect URI which needs to be set to a custom URI schema. The custom URI schema must be registered in the provider's client configuration and in Unity's player settings. In UWP builds, the redirect URI is essential. Set it to a custom URI scheme, e.g. i5:/ . After that, go to the player settings (Edit > Project Settings and select the player tab). Make sure that you are in the UWP settings (the tab with the Windows logo) and nagivate to the \"Publishing Settings\". There is an entry \"protocol\" where you can enter the custom URI scheme. So, in this example, you would enter \"i5\" - so omit the \":/\" part here. When this is done, the built app will open whenever an URI that starts with i5:/ is called. Make sure that in the player settings under \"Other Settings\", the scripting runtime version is set to .NET 4.x Equivalent and the scripting backend is IL2CPP. To retrieve the data that is contained in the login redirect, the i5 Toolkit has an OIDC patcher which will post-process the built IL2CPP. When building the app, there should be an entry in the log console about the OIDC patcher running successully. The patcher will add a hook to the generated C++ files which links the received redirect data back into the Unity C# world. The redirect from the login page to the custom URI schema only works if you add the custom URI schema to the list of allowed redirect URIs in the client's configuration on the provider's Web page. So, in our example, you need to add \"i5:/\" as an allowed redirect URI, e.g. at the Learning Layers client configuration page. Starting the Login Process First, make sure that an OpenID Connect provider has been set. The IOidcProvider has to be configured with the client credentials. One way to initialize it is to attach a MonoBehaviour script to the button UI object in the scene that triggers the login. The script has a public field where you can reference the client credentials. Once the button is clicked, first create an instance of the IOidcProvider that should be used and assign the client credentials. After that, assign the instance to the xref:i5.Toolkit.Core.OpenIDConnectClient.IOidcProvider> property of the service. Before starting the login process, subscribe to the LoginCompleted event to get notified once the login procedure is completed. To start the login process, call the OpenLoginPage() method of the OpenIDConnectService . This will show the login page of the provider to the user in the system's default browser. Once the user is logged in, all the necessary redirects and requests to get the access token are made automatically. After the login process has finished successfully, the LoginCompleted event is raised. Bringing the Application Back into Focus After the login, the Web browser redirects to a URI to which the app listens and which is defined in the RedirectURI . This is usually a custom app protocol or the loopback address where a local server is listening. However, in some cases, the application has to make sure that it gets back into focus after the login. UWP On UWP, the application is automatically brought back into focus if you have specified the custom URI schema as the service's RedirectURI and if you have added it as a protocol in the player settings. Using a custom URI schema as a redirect URI is mandatory for this platform since the redirect contains the necessary data to finish the login. Editor & Standalone For these platforms, the OpenID Connect service only handles the redirect of information. Without additional logic or configurations, the user manually has to return to the application. You can set the RedirectURI to a Web page which should tell the user to return to the app. You can also search for more platform-specific approaches that get the application back into view. Logout To log out, call the Logout() method of the OpenID Connect service. There is also an event LogoutCompleted which is raised after the logout. Client Registration To set up an OpenID Connect client for a specific provider, the client needs to be registered at the provider. As a result, the provider issues client credentials which usually consist of a client id and a client secret. Once you have obtained the client credentials, add them to the client . Creating a Learning Layers Client To register a learning layers client, follow these steps: Go to https://api.learning-layers.eu/o/oauth2/ . Click the \"Log in\" button. Login with your user credentials or create a new account if you do not have one. In the left side bar, select \"Self-service client registration\". Click the button \"Register a new client\". Enter a client name. Add redirect URIs, e.g. http://127.0.0.1 . If your app uses a custom URI schema, you must add the redirect URI to the list, e.g. mySchema:/. If you want to, you can customize the approval page that is shown to the user when the OpenID Connect scopes have to be authorized. You can add a logo and links to Web pages of the terms of service, policy and home page. Moreover, you can add furhter e-mail contacts apart from your own one to indicate who is responsible for this client. All configurations from this step are optional and do not influence the functionality of the OpenID Connect workflow. Scroll up again and select the \"Access\" tab on the page. Add the scopes that you need to the list of scopes. Only the scopes which are listed here can be requested by the client. Make sure that \"Grant Types\" is set to \"authorization code\". Go to the \"Other\" tab. Change the default max age to 1440000 so that the access token is valid for a longer time. Leave all other settings at their default values. Click the \"Save\" button at the top or bottom to finalize the client generation. You will now be presented with the client credentials. Copy the values in the fields \"Client ID\", \"Client Secret\", \"Client Configuration URL\" and \"Registration Access Token\" and save them somewhere on your hard drive. It is important that you keep these values secret and you need them to authorize the client. The values are also required if you later want to edit the client's settings. To change settings at a later point, enter the asked values on the right under \"Self-service client registration\". To use the client credentials in the application, proceed with the section Adding the Client Credentials . Example Scene There is an example scene which shows how to set up and use the Learning Layers OpenID Connect client. To use the scene, first register a client at the Learning Layers provider . After that, create the client credentials file by right-clicking in the Assets browser and choosing \"Create > i5 Toolkit > OpenID Connect Client Data\". Select the created file and enter the client id and client data in the inspector. Then, select the \"Tester\" GameObject in the scene and drag and drop the file onto the field on the OpenID Connect Tester. After these initialization, you can start the scene. If you press F5, the browser is opened with the Learning Layers login page. Once you log in and return to the app, the console will print the access token and same information about the logged in user. The important GameObjects in example scene are the Service Bootstrapper and Tester . The service manager bootstrapper on the Service Bootstrapper initializes the OpenIDConnectService . The Tester GameObject contains the configuration of the Learning Layers OpenID Connect client. It also triggers the login procedure and reacts to the successful login."
  },
  "manual/Procedural-Geometry.html": {
    "href": "manual/Procedural-Geometry.html",
    "title": "Procedural Geometry Kit | i5 Toolkit Documentation",
    "keywords": "Procedural Geometry Kit The procedural geometry kit streamlines the way how meshes can be built. It provides the several advantages over working directly with Unity's Mesh API: Abstraction from low-level mesh representations : Meshes are represented by different arrays, e.g. an array for the vertex positions, a vertex index array to determine the triangles, an array for normal vectors, etc. The procedural geometry kit abstract from this by providing methods for adding vertices or faces. The required low-level operations on the arrays are automatically handeled by the procedural geometry kit. This improves the readability of the code since you are working with named methods instead of numberic arrays. Step by step geometry construction : You can determine the position of vertices and connection between faces in a step-by-step manner, instead of uploading the full vertex and index arrays at once. Multi-threaded, asynchronous geometry construction : The procedural geometry kit does not use Unity's API in the construction process. Therefore, you can calculate the mesh's geometry in a separate thread. Only the generation of the final mesh from the specified geometry data has to happen on the main thread. Uses mesh pooling : Whenever you do not need to use a mesh anymore, you need to make sure that it does not stay in the memory. The geometry creator re-uses meshes which are not needed. Support for polygons : With Unity's native meshes, faces have to be triangles. With the procedural geometry kit, you can add polygons with an arbitrary number of vertices to the geometry. They are automatically triangulated so that they work with Unity's mesh. Usage Create a Geometry Constructor To create geometry, create a GeometryConstructor object: GeometryConstructor geometryConstructor = new GeometryConstructor(); Add Vertices After that, you can add vertices to the geometry using the method <i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor.AddVertex(UnityEngine.Vector3)>. The position of the vertex has to be specified. Optionally, you can also enter the [normal vector](xref:i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor.AddVertex(UnityEngine.Vector3, UnityEngine.Vector3)>), [UV coordinates](xref:i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor.AddVertex(UnityEngine.Vector3, UnityEngine.Vector2)) or [both](xref:i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor.AddVertex(UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Vector3)). Vector3 vertexPosition = new Vector3(0, 1, 2); Vector3 normalVector = new Vector3(1, 1, 1); Vector2 uvCoordinates = new Vector2(0.5f, 0.5f); // add a vertex to the geometry int vertexIndex = geometryConstructor.AddVertex(vertexPosition, uvCoordinates, normalVector); As a result, the index of the vertex is returned. Use it to construct faces. Add Faces Faces are defined by specifying the vertices that are connected to a face. In any of the methods that create faces, list the vertices in clockwise order. All the methods also provide an optional last parameter flipNormals . If this argument is set to true, the normal vector of the face will point into the opposite direction, meaning that the face will be visible from hte other side. In the following code examples v0, v1, v2... are integer indices of previously added vertices. Triangles To add triangles, call the method <xref:i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor.AddTriangle(System.Int32, System.Int32, System.Int32, System.Boolean)> geometryConstructor.AddTriangle(v0, v1, v2); Quads To add quads, call the method <xref:i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor(System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)> geometryConstructor.AddQuad(v0, v1, v2, v3); The quad is automatically converted to two triangles as shown in the figure. Triangle Fan You can add a triangle fan using the method <xref:i5.Toolkit.Core.ProceduralGeometry.GeometryConstructor.AddTriangleFan(System.Int32, System.Int32[], System.Boolean)> Specify the pole (the vertex which is part of all triangles) first and after that, list the vertices clockwise. int[] faceIndices = new int[] {v1, v2, v3, v4, v5, v6}; geometryConstructor.AddTriangleFan(v0, faceIndices); Generate Mesh After the geometry has been defined, the mesh can be generated using the method ConstructMesh() Mesh result = geometryConstructor.ConstructMesh(); The result of this operation will be a Unity- Mesh with the same vertices, triangles, etc. as previously provided to the GeometryConstructor ."
  },
  "manual/Scene-Documentation.html": {
    "href": "manual/Scene-Documentation.html",
    "title": "Scene Documentation Tools | i5 Toolkit Documentation",
    "keywords": "Scene Documentation Tools The scene documentation tools provides the means to document and label your scenes. Usage Create an empty GameObject and add the component Documentation Object to it. The GameObject in the scene will show an \"i\" icon. This icon is only visible in Unity's editor but not in playmode nor the final application. You can move the GameObject in the scene to move the icon around and mark different parts of the scene. On the documentation object, you can specify a title and a description that is stored on the component. Moreover, you can specify a URL that points to a Web document that contains more information. If you have specified a URL, you can click the Open Documentation URL button in the inspector to open the URL. The documentation object's type can be changed. There are a couple of different types that change the icon which is shown on the GameObject. Type Icon Usage INFO Refer to documentation, describe what a GameObject does or leave a note in the scene. TODO Mark a GameObject, component configuration or part of the scene as unfinished so that you or another developer can work on this aspect later. BUG Mark a part of the scene as a bug, e.g. missing collision geometry or intersecting 3D objects. Example Scene The package's examples contain a scene where all available documentation objects are demonstrated. Remarks The icons on the GameObject are realized as Gizmos. Gizmos only work if they are placed in a folder Assets/Gizmos which needs to be at the root of the Assets folder. When creating the package, it copies the icons from its resources into your project's Assets folder. Do not delete them - they will re-appear again the next time you start Unity."
  },
  "manual/Service-Core.html": {
    "href": "manual/Service-Core.html",
    "title": "Service Core System | i5 Toolkit Documentation",
    "keywords": "Service Core System General The service system provides a way to add singletons to the project without the need to have GameObjects or MonoBehaviours. Services are native C# classes which implement the IService interface. Hence, the services also provide a way to abstract away from MonoBehaviours. Whenever you need a centralized functionality that needs to be accessible globally, you can use services to realize it Usage The central component of the service system is the ServiceManager . It is the only component which needs to be placed on a GameObject. However, you do not need to set up the GameObject yourself. Whenever you use the ServiceManager , it automatically generates an instance on a GameObject and sets it up. Services Creating a Service To create a service, create a class that does not inherit from MonoBehaviour . The new service class must implement the interface IService . If you need to call a function in every frame, implement the interface IUpdateableService instead. Updateable Services A special type of service is the updateable service. You can define a updateable service by creating a new C# class that implements only the IUpdateableService interface. The interface provides the typical IService methods but also an Update() method that is called every frame. Moreover, it adds a property Enabled . The code inside of Update() is only executed if Enabled is set to true . Async Threaded Worker Service One pre-defined service is the AsyncThreadedWorkerService . Its purpose is to work on asynchronous, longer operations on a separate thread. After the operation, a result is returned. You can post operations to this service and the service will execute them on a separate thread. If the operation block contains a callback, the callback method will be invoked once the operation has finished. The result will be provided to the callback Important: You cannot access the Unity API, e.g. GameObjects or Meshes, in the separate thread. This means you cannot manipulate or read the scene in the operation. Create your operation in a way that all information are available at the beginning of the operation and that you only need the result at the end. Registration of Services Create an instance of the service using its constructor: MyService myService = new MyService(); // do your initial configuration of the service here After that, you can register a service by calling RegisterService : ServiceManager.RegisterService(myService) After that, the service is available and can be addressed. Registering the service automatically initializes it. Addressing Services Once you have created and registered a service, you can access by calling GetService ServiceManager.GetService<MyService>(); Specify the service class in the GetService method. If the service is not registered, an InvalidOperationException is thrown. You can check if a service was registered by checking the bool return value of ServiceManager.ServiceExists<MyService>() . Removing Services To remove the service, call RemoveService ServiceManager.RemoveService<MyService>(); Bootstrappers You can create a bootstrapper script that automatically populates the service system. The bootstrapper class needs to inherit from BaseServiceBootstrapper . It must implement the methods RegisterServices() and UnRegisterServices() which are called once the component is started and once it is destroyed. If you want to keep services after scene changes, either leave the UnRegisterServices() method empty or make the bootstrapper object persistent using MarkPersistent(GameObject) . You do not need to use the BaseServiceBootstrapper . Alternatively to a bootstrapper which adds all services at the beginning, you can dynamically register and unregister services at any time and in any script. Example Scene There is an example scene that shows how to set up different kinds of services using the toolkit's service architecture. The Service Bootstrapper GameObject contains a bootstrapper script which populates the service manager with services. The demo scene contains an updateable service which logs the application's run time in intervals. There is also a service which prints a statement to the console if you press F5. Pressing F5 also triggers a simulated async operation which waits for a couple of seconds before printing a statement to the console. The F5 functionality is triggered by a Demo Service Client ."
  },
  "manual/Spawner.html": {
    "href": "manual/Spawner.html",
    "title": "Spawner | i5 Toolkit Documentation",
    "keywords": "Spawner The spawner is a configurable object that allows you to create copies of a pre-defined prefab in the scene. Setup The spawner can be set up in Unity's inspector with the following properties: Prefab : Add a prefab that the spawner should create in the scene. Spawn on Awake : If this option is checked, a copy of the prefab is immediately created once the application starts. Destroy With Spawner : If this option is checked and you destroy the spawner component, it will also destroy all created copies in the scene. Max Number of Instances : You can limit the amount of copies which are created in the scene, e.g. for performance. If you set this value to 0, no limit is set. Overwrite Existing Instances : If you check this option and you have set a limit for the copies, creating new copies will overwrite old ones. The overwriting logic uses FIFO, meaning that that the first copy that was created is also overwritten first. If this option is not checked, trying to create new copies will not work. Usage You can create a new copy in the scene by calling the method Spawn() on the spawner component. Created copies are listed under the property SpawnedInstances . Moreover, the last spawned GameObject can be accessed using the property MostRecentlySpawnedObject . Example Scene The example scene contains a spawner object and a demo script which accesses the spawner. If you press F5, a new instance of the given cylinder prefab is spawned. You can try out the different settings of the spawner in this scene to find out how the spawner works in detail."
  },
  "manual/TestHelpers/Async-Test.html": {
    "href": "manual/TestHelpers/Async-Test.html",
    "title": "Async Test | i5 Toolkit Documentation",
    "keywords": "Async Test Use Case When writing unit tests, you will encounter tests where asynchronous methods need to be awaited. With the NUnit version that is used in Unity, you can only create test methods that are either async void or IEnumerator coroutines for asynchronous processes. The usual way of awaiting a method call in an async Task method is not possible. You should not use async void methods as it can lead to unexpected behavior, especially if an exception is thrown (for a detailed explanation on why you should avoid async void , click here ). Therefore, the i5 Toolkit provides an AsyncTest class. With the help of this class, the async methods are awaited inside of coroutines. Usage Async Methods Without Return Value In this example, a test must await the async method FooAsync() . Create a [UnityTest] unit test which can run over multiple frames. This means that the return type of this test method needs to be IEnumerator . After that write the test. Instead of adding await FooAsync() , first create a Task object from the method call. After that, use WaitForTask to execute the task: [UnityTest] public IEnumerator MyAsyncUnitTest() { ... // first create a task object // note that this does not execute the method directly Task task = FooAsync(); // execute the task inside of the WaitForTask coroutine yield return AsyncTest.WaitForTask(task); Debug.Log(\"This log is only printed once the async task has finished\"); } Async Methods With Return Value Write the test in the same way as in the example without a return value. Instead of using Task , use the variant Task<TResult> . This class takes a generic type which defines the result's type. After the completion of a task, the task object contains the result in its Result property. [UnityTest] public IEnumerator MyAsyncUnitTest() { ... // first create a task object // note that this does not execute the method directly Task<int> task = FooReturnValueAsync(); // execute the task inside of the WaitForTask coroutine yield return AsyncTest.WaitForTask(task); Debug.Log(\"The result is: \" + task.Result); } Functionality WaitForTask executes the given task in a coroutine and waits for it to complete. After that, the result is available in the task object. The coroutine of the test function waits for the WaitForTask method to finish. If an exception is thrown during the execution of the async method, WaitForTask will re-throw this exception. This cirumvents the problem that exceptions in coroutines occur silently."
  },
  "manual/Utilities/Component-Utilities.html": {
    "href": "manual/Utilities/Component-Utilities.html",
    "title": "Component Utilities | i5 Toolkit Documentation",
    "keywords": "Component Utilities Use Case Scripts can fetch references using the method GetComponent . However, this method should be used only if necessary. Therefore, scripts should cache the references once they are fetched. The method EnsureComponentReference guarantees that a given component reference is set. Moreover, there are also cases where a script needs to access a component which is not yet attached to the GameObject. Components can be added using AddComponent . However, before adding a component to a GameObject, one should check if it already exists to avoid duplicates. The method GetOrAddComponent provides a shortcut to do these steps. Usage Ensure Component Reference In order to cache a reference to another component in a script, create a variable for the component. There is no need to initialize the reference in Awake or Start . Whenever you access the variable with the reference, call EnsureComponentReference just before it. After calling this method, the variable is ensured to be initialized with the reference. private OtherComponent referenceToOther; ... private void Foo() { ComponentUtilities.EnsureComponentReference(gameObject, ref referenceToOther, true); referenceToOther.DoSomething(); } The first argument of the function is the GameObject on which the component should be searched. The second argument is the reference variable. Important: Provide the variable as a ref . This way, the variable can be set by the EnsureComponentReference . If the third argument is set to true, a new component will automatically be added in case it is not found. This also means that EnsureComponentReference will definitely initialize the reference variable. If it is set to false and the component cannot be found, the reference variable remains null . Hint: Encapsulate the reference variable in a property with a getter and call EnsureComponentReference before returning the reference. After that, only use the property in the script to access the reference. This way, you do not need to make sure that the reference is set every time it is used. private OtherComponent ReferenceToOther { private OtherComponent referenceToOther; get { ComponentUtilities.EnsureComponentReference(gameObject, ref referenceToOther, true); return referenceToOther; } ... private void Foo() { ReferenceToOther.DoSomething(); } } Get or Add Component GetOrAddComponent combines GetComponent and AddComponent . First it tries to get the component using GetComponent . If the component cannot be found, it adds the component to the GameObject and returns the added instance. Therefore, it will always return a component instance and cannot return null OtherComponent referenceToOther = ComponentUtilities.GetOrAddComponent<OtherComponent>(gameObject);"
  },
  "manual/Utilities/Constant-Rotation.html": {
    "href": "manual/Utilities/Constant-Rotation.html",
    "title": "Constant Rotation | i5 Toolkit Documentation",
    "keywords": "Constant Rotation Use Case The ConstantRotation component makes an object spin at a constant rate around the Y axis (vertical axis). This can e.g. be used for turntables, rotating planets or other visual effects. Usage In the Unity editor, add the component Constant Rotation to a GameObject. You can alter the speed value which is defined in angles per second. The object can turn into the other direction by giving it a negative speed value. To stop the rotation, disable the component by setting its property enabled to false . Functionality The rotation speed is independent of the framerate. Moreover, the component makes sure that the object only has a rotation between 0 and 360 degrees. If it exeeds 360 degrees, the rotation is reset to a value in the range between 0 and 360 that represents the same orientation of the object to avoid floating point imprecisions."
  },
  "manual/Utilities/i5Debug.html": {
    "href": "manual/Utilities/i5Debug.html",
    "title": "i5 Debug | i5 Toolkit Documentation",
    "keywords": "i5 Debug Use Case The i5Debug class provides pre-formatted log commands. They provide more information about the origin of the log message by writing the class name in front of the log message. If the class is a MonoBehaviour, it will also highlight the associated GameObject in the hierarchy if the log message is clicked in the console. Usage Log messages can be created in a similar way to the standard debug logs in Unity: Unity Debug Log i5 Debug Log Debug.Log(\"text\") i5Debug.Log(\"text\", this) Debug.LogWarning(\"text\") i5Debug.LogWarning(\"text\", this) Debug.LogError(\"text\") i5Debug.LogError(\"text\", this) Functionality The i5Debug is a formatter which takes additional information as input and formats them into a log output. The output is logged using Unity's standard Debug class. This also means that it can be used in combination with standard Debug.Log outputs."
  },
  "manual/Utilities/Json-Array-Utility.html": {
    "href": "manual/Utilities/Json-Array-Utility.html",
    "title": "Json Array Utility | i5 Toolkit Documentation",
    "keywords": "Json Array Utility Use Case Unity's built-in JsonUtility does not support JSON strings which have an array at root level: To solve this, the JsonArrayUtility was implemented. JsonArrayUtility is e.g. useful when communicating with a Web API that returns list of objects for a query. JsonArrayUtility is only required if the JSON array is on the root level of the JSON string. If it is part of a JSON object, Unity's JsonUtility can handle it. Usage The usage of JsonArrayUtility is identical to JsonUtility : Serialize to JSON To serialize an array to JSON, call ToJson . It returns a JSON object with one key \"array\". The value of this key is the array. int[] intArray = { 1, 2, 3, 4, 5 }; string serializedJson = JsonArrayUtility.ToJson(intArray); // result is: // {\"array\":[1,2,3,4,5]} Deserialize from JSON If the JSON string already has the from where the array is encapuslated into the \"array\" key-value pair, you can use FromJson to deserialize and unwrap the array. string wrappedArray = \"{\\\"array\\\":[1,2,3,4,5]}\"; int[] deserializedArray = JsonArrayUtility.FromJson<int>(wrappedArray); If the JSON string is not encapsulated but has the array on its root level, first call EncapsulateInWrapper and then FromJson . string jsonArray = \"[1,2,3,4,5]\"; string wrappedArray = JsonArrayUtility.EncapsulateInWrapper(jsonArray); int[] deserializedArray = JsonArrayUtility.FromJson<int>(wrappedArray); Functionality JsonArrayUtility wraps arrays into an object so that the array is not at root level anymore. After that, it uses Unity's JsonUtility to serialize the JSON string. To deserialize, EncapsulateInWrapper adds the JSON object wrapper around the JSON string. The FromJson deserializes the wrapped JSON string to the wrapper object. After that, it unpacks the wrapper object and returns the contained array."
  },
  "manual/Utilities/Persistent-Scene.html": {
    "href": "manual/Utilities/Persistent-Scene.html",
    "title": "Persistent Scene | i5 Toolkit Documentation",
    "keywords": "Persistent Scene Use Case When switching a scene in Unity using the replace method, the GameObjects from one scene are unloaded and the content of the next scene is loaded. There are use cases where some GameObjects in Unity should persist across scene changes, e.g. if they are global manager objects or also the player object. For these, Unity provides the DontDestroyOnLoad method. However, DontDestroyOnLoad is discouraged as it does not give much control over the object. For instance, it is not possible to undo this persitent status again. A better solution than DontDestroyOnLoad is to manually create a persistent scene that exists for the entire execution time of the application. The i5 Toolkit provides a possible implementation for this. GameObjects can be marked as persistent so that they are not unloaded in scene changes. Instead, the GameObjects are transfered to a \"i5 Persistent Scene\". Usage To make an object persist between scene changes, use the function MarkPersistent : PersistenceScene.MarkPersistent(gameObject); If you are using the Persistence Scene solution, make sure that you load new scenes in the additive mode and not the single mode: Do not use the single mode, as this will unload the persistent scene. SceneManager.LoadScene(\"NewScene\", LoadSceneMode.Additive); If the GameObject should not be persistent anymore, you can revert its status using the command UnmarkPersistent . Note that this will move the GameObject into the currently active scene. This is not guaranteed to be the same scene as the one it was originally in. PersistenceScene.UnmarkPersistent(gameObject); Functionality When using the PersistenceScene , it will create a new scene \"i5 Persistent Scene\" and load it in an additive mode. Objects which are marked as persistent are transferred into this scene. As long as scripts do not unload the persistent scene, GameObjects in it will persist across scene changes. When talking about persistent objects, this means making GameObjects persistent within one application session with regard to scene changes. This feature does not create persistence in-between sessions like a save-load solution."
  },
  "manual/Utilities/Unity-Adapters.html": {
    "href": "manual/Utilities/Unity-Adapters.html",
    "title": "Unity Adapters | i5 Toolkit Documentation",
    "keywords": "Unity Adapters Unity adapters are a growing collection of interfaces and adapter classes to hide the Unity API and provide an abstraction layer on which the application logic can be implemented. Each of the interfaces defines a contract, e.g. for a text display, which defines what an object can do. This way, application scripts can work with the interfaces and do not need to worry about the underlying functionality. The Unity API is wrapped into adapter objects which implement the required interfaces. Use Case Unity adapters can be used to decouple application logic from the presentation in the scene. For instance, this allows a script to display text on an ITextDisplay . This interface allows the script to set text but it does not need to know about the implementation of the text display. By initializing the ITextDisplay object with an adapter, the same application logic can work with different UI implementations, e.g. TextMesh or TextMeshPro. Interfaces The toolkit provides the following interfaces: Interface Provided funtionality IActivateable Activate and deactivate an object IRectangle Rectangular 2D (UI) element IScrollView Scrollable view ITextDisplay UI display to show text to show text Adapters The toolkit provides adapters for the following Unity objects: Unity Class Adapter Class GameObject GameObjectAdapter RectTransform RectTransformAdapter ScrollRect ScrollRectAdapter TextMesh TextMeshTextAdapter TextMeshPro TextMeshProTextAdapter TextMeshProUGUI TextMeshProUGUITextAdapter Example An example can be found in the source code of the App Console's UI. It works with a general text display interface which allows the realizaion of consoles with TextMeshes or TextMeshPro."
  }
}